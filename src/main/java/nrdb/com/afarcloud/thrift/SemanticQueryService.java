/* Copyright 2018-2021 Universidad Politécnica de Madrid (UPM).
 *
 * Authors:
 *    Sara Lana Serrano
 *    Mario San Emeterio de la Parte
 *    Vicente Hernández Díaz
 *    José-Fernan Martínez Ortega
 *
 * This software is distributed under a dual-license scheme:
 *
 * - For academic uses: Licensed under GNU Affero General Public License as
 *                      published by the Free Software Foundation, either
 *                      version 3 of the License, or (at your option) any
 *                      later version.
 *
 * - For any other use: Licensed under the Apache License, Version 2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * You can get a copy of the license terms in licenses/LICENSE.
 *
 */

/**

 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.afarcloud.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2020-7-3")
public class SemanticQueryService {

  public interface Iface {

    public List<com.afarcloud.thrift.Vehicle> getAllVehicles(int requestId) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.MissionTag> getAllMissions(int requestId) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.MissionTag> getOngoingMissions(int requestId) throws org.apache.thrift.TException;

    public com.afarcloud.thrift.Mission getMissionById(int requestId, int missionId) throws org.apache.thrift.TException;

    public com.afarcloud.thrift.Vehicle getVehicle(int requestId, int vid) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorLastData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataBySensorUid(int requestId, String sensorUid) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataBySensorType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataByObservationType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.CollarData> queryCollarLastData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.CollarData> queryCollarLastDataByCollarUid(int requestId, String collarUid) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.StateVector> queryVehicleLastStateVector(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.StateVector> queryVehicleLastStateVectorByVehicleId(int requestId, int vehicleId) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataBySensorUid(int requestId, String sensorUid, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataBySensorType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataByObservationType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.CollarData> queryCollarHistoricalData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.CollarData> queryCollarHistoricalDataByCollarUid(int requestId, String collarUid, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.StateVector> queryVehicleHistoricalStateVectors(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.StateVector> queryVehicleHistoricalStateVectorByVehicleId(int requestId, int vehicleId, long startTime, long endTime) throws org.apache.thrift.TException;

    public void storeEvent(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference) throws org.apache.thrift.TException;

    public String ping() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAllVehicles(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllMissions(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOngoingMissions(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMissionById(int requestId, int missionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVehicle(int requestId, int vid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorLastData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorLastDataBySensorUid(int requestId, String sensorUid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorLastDataBySensorType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorLastDataByObservationType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCollarLastData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCollarLastDataByCollarUid(int requestId, String collarUid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryVehicleLastStateVector(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryVehicleLastStateVectorByVehicleId(int requestId, int vehicleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorHistoricalData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorHistoricalDataBySensorUid(int requestId, String sensorUid, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorHistoricalDataBySensorType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorHistoricalDataByObservationType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCollarHistoricalData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCollarHistoricalDataByCollarUid(int requestId, String collarUid, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryVehicleHistoricalStateVectors(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryVehicleHistoricalStateVectorByVehicleId(int requestId, int vehicleId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeEvent(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.afarcloud.thrift.Vehicle> getAllVehicles(int requestId) throws org.apache.thrift.TException
    {
      send_getAllVehicles(requestId);
      return recv_getAllVehicles();
    }

    public void send_getAllVehicles(int requestId) throws org.apache.thrift.TException
    {
      getAllVehicles_args args = new getAllVehicles_args();
      args.setRequestId(requestId);
      sendBase("getAllVehicles", args);
    }

    public List<com.afarcloud.thrift.Vehicle> recv_getAllVehicles() throws org.apache.thrift.TException
    {
      getAllVehicles_result result = new getAllVehicles_result();
      receiveBase(result, "getAllVehicles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllVehicles failed: unknown result");
    }

    public List<com.afarcloud.thrift.MissionTag> getAllMissions(int requestId) throws org.apache.thrift.TException
    {
      send_getAllMissions(requestId);
      return recv_getAllMissions();
    }

    public void send_getAllMissions(int requestId) throws org.apache.thrift.TException
    {
      getAllMissions_args args = new getAllMissions_args();
      args.setRequestId(requestId);
      sendBase("getAllMissions", args);
    }

    public List<com.afarcloud.thrift.MissionTag> recv_getAllMissions() throws org.apache.thrift.TException
    {
      getAllMissions_result result = new getAllMissions_result();
      receiveBase(result, "getAllMissions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllMissions failed: unknown result");
    }

    public List<com.afarcloud.thrift.MissionTag> getOngoingMissions(int requestId) throws org.apache.thrift.TException
    {
      send_getOngoingMissions(requestId);
      return recv_getOngoingMissions();
    }

    public void send_getOngoingMissions(int requestId) throws org.apache.thrift.TException
    {
      getOngoingMissions_args args = new getOngoingMissions_args();
      args.setRequestId(requestId);
      sendBase("getOngoingMissions", args);
    }

    public List<com.afarcloud.thrift.MissionTag> recv_getOngoingMissions() throws org.apache.thrift.TException
    {
      getOngoingMissions_result result = new getOngoingMissions_result();
      receiveBase(result, "getOngoingMissions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOngoingMissions failed: unknown result");
    }

    public com.afarcloud.thrift.Mission getMissionById(int requestId, int missionId) throws org.apache.thrift.TException
    {
      send_getMissionById(requestId, missionId);
      return recv_getMissionById();
    }

    public void send_getMissionById(int requestId, int missionId) throws org.apache.thrift.TException
    {
      getMissionById_args args = new getMissionById_args();
      args.setRequestId(requestId);
      args.setMissionId(missionId);
      sendBase("getMissionById", args);
    }

    public com.afarcloud.thrift.Mission recv_getMissionById() throws org.apache.thrift.TException
    {
      getMissionById_result result = new getMissionById_result();
      receiveBase(result, "getMissionById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMissionById failed: unknown result");
    }

    public com.afarcloud.thrift.Vehicle getVehicle(int requestId, int vid) throws org.apache.thrift.TException
    {
      send_getVehicle(requestId, vid);
      return recv_getVehicle();
    }

    public void send_getVehicle(int requestId, int vid) throws org.apache.thrift.TException
    {
      getVehicle_args args = new getVehicle_args();
      args.setRequestId(requestId);
      args.setVid(vid);
      sendBase("getVehicle", args);
    }

    public com.afarcloud.thrift.Vehicle recv_getVehicle() throws org.apache.thrift.TException
    {
      getVehicle_result result = new getVehicle_result();
      receiveBase(result, "getVehicle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVehicle failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorLastData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException
    {
      send_querySensorLastData(requestId, regionCentre, radius);
      return recv_querySensorLastData();
    }

    public void send_querySensorLastData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException
    {
      querySensorLastData_args args = new querySensorLastData_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      sendBase("querySensorLastData", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorLastData() throws org.apache.thrift.TException
    {
      querySensorLastData_result result = new querySensorLastData_result();
      receiveBase(result, "querySensorLastData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorLastData failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataBySensorUid(int requestId, String sensorUid) throws org.apache.thrift.TException
    {
      send_querySensorLastDataBySensorUid(requestId, sensorUid);
      return recv_querySensorLastDataBySensorUid();
    }

    public void send_querySensorLastDataBySensorUid(int requestId, String sensorUid) throws org.apache.thrift.TException
    {
      querySensorLastDataBySensorUid_args args = new querySensorLastDataBySensorUid_args();
      args.setRequestId(requestId);
      args.setSensorUid(sensorUid);
      sendBase("querySensorLastDataBySensorUid", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorLastDataBySensorUid() throws org.apache.thrift.TException
    {
      querySensorLastDataBySensorUid_result result = new querySensorLastDataBySensorUid_result();
      receiveBase(result, "querySensorLastDataBySensorUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorLastDataBySensorUid failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataBySensorType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType) throws org.apache.thrift.TException
    {
      send_querySensorLastDataBySensorType(requestId, regionCentre, radius, sensorType);
      return recv_querySensorLastDataBySensorType();
    }

    public void send_querySensorLastDataBySensorType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType) throws org.apache.thrift.TException
    {
      querySensorLastDataBySensorType_args args = new querySensorLastDataBySensorType_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      args.setSensorType(sensorType);
      sendBase("querySensorLastDataBySensorType", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorLastDataBySensorType() throws org.apache.thrift.TException
    {
      querySensorLastDataBySensorType_result result = new querySensorLastDataBySensorType_result();
      receiveBase(result, "querySensorLastDataBySensorType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorLastDataBySensorType failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataByObservationType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType) throws org.apache.thrift.TException
    {
      send_querySensorLastDataByObservationType(requestId, regionCentre, radius, obserType);
      return recv_querySensorLastDataByObservationType();
    }

    public void send_querySensorLastDataByObservationType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType) throws org.apache.thrift.TException
    {
      querySensorLastDataByObservationType_args args = new querySensorLastDataByObservationType_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      args.setObserType(obserType);
      sendBase("querySensorLastDataByObservationType", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorLastDataByObservationType() throws org.apache.thrift.TException
    {
      querySensorLastDataByObservationType_result result = new querySensorLastDataByObservationType_result();
      receiveBase(result, "querySensorLastDataByObservationType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorLastDataByObservationType failed: unknown result");
    }

    public List<com.afarcloud.thrift.CollarData> queryCollarLastData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException
    {
      send_queryCollarLastData(requestId, regionCentre, radius);
      return recv_queryCollarLastData();
    }

    public void send_queryCollarLastData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException
    {
      queryCollarLastData_args args = new queryCollarLastData_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      sendBase("queryCollarLastData", args);
    }

    public List<com.afarcloud.thrift.CollarData> recv_queryCollarLastData() throws org.apache.thrift.TException
    {
      queryCollarLastData_result result = new queryCollarLastData_result();
      receiveBase(result, "queryCollarLastData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCollarLastData failed: unknown result");
    }

    public List<com.afarcloud.thrift.CollarData> queryCollarLastDataByCollarUid(int requestId, String collarUid) throws org.apache.thrift.TException
    {
      send_queryCollarLastDataByCollarUid(requestId, collarUid);
      return recv_queryCollarLastDataByCollarUid();
    }

    public void send_queryCollarLastDataByCollarUid(int requestId, String collarUid) throws org.apache.thrift.TException
    {
      queryCollarLastDataByCollarUid_args args = new queryCollarLastDataByCollarUid_args();
      args.setRequestId(requestId);
      args.setCollarUid(collarUid);
      sendBase("queryCollarLastDataByCollarUid", args);
    }

    public List<com.afarcloud.thrift.CollarData> recv_queryCollarLastDataByCollarUid() throws org.apache.thrift.TException
    {
      queryCollarLastDataByCollarUid_result result = new queryCollarLastDataByCollarUid_result();
      receiveBase(result, "queryCollarLastDataByCollarUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCollarLastDataByCollarUid failed: unknown result");
    }

    public List<com.afarcloud.thrift.StateVector> queryVehicleLastStateVector(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException
    {
      send_queryVehicleLastStateVector(requestId, regionCentre, radius);
      return recv_queryVehicleLastStateVector();
    }

    public void send_queryVehicleLastStateVector(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException
    {
      queryVehicleLastStateVector_args args = new queryVehicleLastStateVector_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      sendBase("queryVehicleLastStateVector", args);
    }

    public List<com.afarcloud.thrift.StateVector> recv_queryVehicleLastStateVector() throws org.apache.thrift.TException
    {
      queryVehicleLastStateVector_result result = new queryVehicleLastStateVector_result();
      receiveBase(result, "queryVehicleLastStateVector");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryVehicleLastStateVector failed: unknown result");
    }

    public List<com.afarcloud.thrift.StateVector> queryVehicleLastStateVectorByVehicleId(int requestId, int vehicleId) throws org.apache.thrift.TException
    {
      send_queryVehicleLastStateVectorByVehicleId(requestId, vehicleId);
      return recv_queryVehicleLastStateVectorByVehicleId();
    }

    public void send_queryVehicleLastStateVectorByVehicleId(int requestId, int vehicleId) throws org.apache.thrift.TException
    {
      queryVehicleLastStateVectorByVehicleId_args args = new queryVehicleLastStateVectorByVehicleId_args();
      args.setRequestId(requestId);
      args.setVehicleId(vehicleId);
      sendBase("queryVehicleLastStateVectorByVehicleId", args);
    }

    public List<com.afarcloud.thrift.StateVector> recv_queryVehicleLastStateVectorByVehicleId() throws org.apache.thrift.TException
    {
      queryVehicleLastStateVectorByVehicleId_result result = new queryVehicleLastStateVectorByVehicleId_result();
      receiveBase(result, "queryVehicleLastStateVectorByVehicleId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryVehicleLastStateVectorByVehicleId failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_querySensorHistoricalData(requestId, regionCentre, radius, startTime, endTime);
      return recv_querySensorHistoricalData();
    }

    public void send_querySensorHistoricalData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException
    {
      querySensorHistoricalData_args args = new querySensorHistoricalData_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("querySensorHistoricalData", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorHistoricalData() throws org.apache.thrift.TException
    {
      querySensorHistoricalData_result result = new querySensorHistoricalData_result();
      receiveBase(result, "querySensorHistoricalData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorHistoricalData failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataBySensorUid(int requestId, String sensorUid, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_querySensorHistoricalDataBySensorUid(requestId, sensorUid, startTime, endTime);
      return recv_querySensorHistoricalDataBySensorUid();
    }

    public void send_querySensorHistoricalDataBySensorUid(int requestId, String sensorUid, long startTime, long endTime) throws org.apache.thrift.TException
    {
      querySensorHistoricalDataBySensorUid_args args = new querySensorHistoricalDataBySensorUid_args();
      args.setRequestId(requestId);
      args.setSensorUid(sensorUid);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("querySensorHistoricalDataBySensorUid", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorHistoricalDataBySensorUid() throws org.apache.thrift.TException
    {
      querySensorHistoricalDataBySensorUid_result result = new querySensorHistoricalDataBySensorUid_result();
      receiveBase(result, "querySensorHistoricalDataBySensorUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorHistoricalDataBySensorUid failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataBySensorType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_querySensorHistoricalDataBySensorType(requestId, regionCentre, radius, sensorType, startTime, endTime);
      return recv_querySensorHistoricalDataBySensorType();
    }

    public void send_querySensorHistoricalDataBySensorType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime) throws org.apache.thrift.TException
    {
      querySensorHistoricalDataBySensorType_args args = new querySensorHistoricalDataBySensorType_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      args.setSensorType(sensorType);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("querySensorHistoricalDataBySensorType", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorHistoricalDataBySensorType() throws org.apache.thrift.TException
    {
      querySensorHistoricalDataBySensorType_result result = new querySensorHistoricalDataBySensorType_result();
      receiveBase(result, "querySensorHistoricalDataBySensorType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorHistoricalDataBySensorType failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataByObservationType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_querySensorHistoricalDataByObservationType(requestId, regionCentre, radius, obserType, startTime, endTime);
      return recv_querySensorHistoricalDataByObservationType();
    }

    public void send_querySensorHistoricalDataByObservationType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime) throws org.apache.thrift.TException
    {
      querySensorHistoricalDataByObservationType_args args = new querySensorHistoricalDataByObservationType_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      args.setObserType(obserType);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("querySensorHistoricalDataByObservationType", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorHistoricalDataByObservationType() throws org.apache.thrift.TException
    {
      querySensorHistoricalDataByObservationType_result result = new querySensorHistoricalDataByObservationType_result();
      receiveBase(result, "querySensorHistoricalDataByObservationType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorHistoricalDataByObservationType failed: unknown result");
    }

    public List<com.afarcloud.thrift.CollarData> queryCollarHistoricalData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_queryCollarHistoricalData(requestId, regionCentre, radius, startTime, endTime);
      return recv_queryCollarHistoricalData();
    }

    public void send_queryCollarHistoricalData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException
    {
      queryCollarHistoricalData_args args = new queryCollarHistoricalData_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("queryCollarHistoricalData", args);
    }

    public List<com.afarcloud.thrift.CollarData> recv_queryCollarHistoricalData() throws org.apache.thrift.TException
    {
      queryCollarHistoricalData_result result = new queryCollarHistoricalData_result();
      receiveBase(result, "queryCollarHistoricalData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCollarHistoricalData failed: unknown result");
    }

    public List<com.afarcloud.thrift.CollarData> queryCollarHistoricalDataByCollarUid(int requestId, String collarUid, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_queryCollarHistoricalDataByCollarUid(requestId, collarUid, startTime, endTime);
      return recv_queryCollarHistoricalDataByCollarUid();
    }

    public void send_queryCollarHistoricalDataByCollarUid(int requestId, String collarUid, long startTime, long endTime) throws org.apache.thrift.TException
    {
      queryCollarHistoricalDataByCollarUid_args args = new queryCollarHistoricalDataByCollarUid_args();
      args.setRequestId(requestId);
      args.setCollarUid(collarUid);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("queryCollarHistoricalDataByCollarUid", args);
    }

    public List<com.afarcloud.thrift.CollarData> recv_queryCollarHistoricalDataByCollarUid() throws org.apache.thrift.TException
    {
      queryCollarHistoricalDataByCollarUid_result result = new queryCollarHistoricalDataByCollarUid_result();
      receiveBase(result, "queryCollarHistoricalDataByCollarUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCollarHistoricalDataByCollarUid failed: unknown result");
    }

    public List<com.afarcloud.thrift.StateVector> queryVehicleHistoricalStateVectors(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_queryVehicleHistoricalStateVectors(requestId, regionCentre, radius, startTime, endTime);
      return recv_queryVehicleHistoricalStateVectors();
    }

    public void send_queryVehicleHistoricalStateVectors(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException
    {
      queryVehicleHistoricalStateVectors_args args = new queryVehicleHistoricalStateVectors_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("queryVehicleHistoricalStateVectors", args);
    }

    public List<com.afarcloud.thrift.StateVector> recv_queryVehicleHistoricalStateVectors() throws org.apache.thrift.TException
    {
      queryVehicleHistoricalStateVectors_result result = new queryVehicleHistoricalStateVectors_result();
      receiveBase(result, "queryVehicleHistoricalStateVectors");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryVehicleHistoricalStateVectors failed: unknown result");
    }

    public List<com.afarcloud.thrift.StateVector> queryVehicleHistoricalStateVectorByVehicleId(int requestId, int vehicleId, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_queryVehicleHistoricalStateVectorByVehicleId(requestId, vehicleId, startTime, endTime);
      return recv_queryVehicleHistoricalStateVectorByVehicleId();
    }

    public void send_queryVehicleHistoricalStateVectorByVehicleId(int requestId, int vehicleId, long startTime, long endTime) throws org.apache.thrift.TException
    {
      queryVehicleHistoricalStateVectorByVehicleId_args args = new queryVehicleHistoricalStateVectorByVehicleId_args();
      args.setRequestId(requestId);
      args.setVehicleId(vehicleId);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("queryVehicleHistoricalStateVectorByVehicleId", args);
    }

    public List<com.afarcloud.thrift.StateVector> recv_queryVehicleHistoricalStateVectorByVehicleId() throws org.apache.thrift.TException
    {
      queryVehicleHistoricalStateVectorByVehicleId_result result = new queryVehicleHistoricalStateVectorByVehicleId_result();
      receiveBase(result, "queryVehicleHistoricalStateVectorByVehicleId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryVehicleHistoricalStateVectorByVehicleId failed: unknown result");
    }

    public void storeEvent(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference) throws org.apache.thrift.TException
    {
      send_storeEvent(requestId, missionId, vehicleId, subtype, description, timeReference);
    }

    public void send_storeEvent(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference) throws org.apache.thrift.TException
    {
      storeEvent_args args = new storeEvent_args();
      args.setRequestId(requestId);
      args.setMissionId(missionId);
      args.setVehicleId(vehicleId);
      args.setSubtype(subtype);
      args.setDescription(description);
      args.setTimeReference(timeReference);
      sendBase("storeEvent", args);
    }

    public String ping() throws org.apache.thrift.TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public String recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAllVehicles(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllVehicles_call method_call = new getAllVehicles_call(requestId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllVehicles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      public getAllVehicles_call(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllVehicles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllVehicles_args args = new getAllVehicles_args();
        args.setRequestId(requestId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.Vehicle> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllVehicles();
      }
    }

    public void getAllMissions(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllMissions_call method_call = new getAllMissions_call(requestId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllMissions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      public getAllMissions_call(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllMissions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllMissions_args args = new getAllMissions_args();
        args.setRequestId(requestId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.MissionTag> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllMissions();
      }
    }

    public void getOngoingMissions(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOngoingMissions_call method_call = new getOngoingMissions_call(requestId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOngoingMissions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      public getOngoingMissions_call(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOngoingMissions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOngoingMissions_args args = new getOngoingMissions_args();
        args.setRequestId(requestId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.MissionTag> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOngoingMissions();
      }
    }

    public void getMissionById(int requestId, int missionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMissionById_call method_call = new getMissionById_call(requestId, missionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMissionById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int missionId;
      public getMissionById_call(int requestId, int missionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.missionId = missionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMissionById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMissionById_args args = new getMissionById_args();
        args.setRequestId(requestId);
        args.setMissionId(missionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.afarcloud.thrift.Mission getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMissionById();
      }
    }

    public void getVehicle(int requestId, int vid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVehicle_call method_call = new getVehicle_call(requestId, vid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVehicle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int vid;
      public getVehicle_call(int requestId, int vid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.vid = vid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVehicle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVehicle_args args = new getVehicle_args();
        args.setRequestId(requestId);
        args.setVid(vid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.afarcloud.thrift.Vehicle getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVehicle();
      }
    }

    public void querySensorLastData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorLastData_call method_call = new querySensorLastData_call(requestId, regionCentre, radius, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorLastData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      public querySensorLastData_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorLastData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorLastData_args args = new querySensorLastData_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorLastData();
      }
    }

    public void querySensorLastDataBySensorUid(int requestId, String sensorUid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorLastDataBySensorUid_call method_call = new querySensorLastDataBySensorUid_call(requestId, sensorUid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorLastDataBySensorUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private String sensorUid;
      public querySensorLastDataBySensorUid_call(int requestId, String sensorUid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.sensorUid = sensorUid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorLastDataBySensorUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorLastDataBySensorUid_args args = new querySensorLastDataBySensorUid_args();
        args.setRequestId(requestId);
        args.setSensorUid(sensorUid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorLastDataBySensorUid();
      }
    }

    public void querySensorLastDataBySensorType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorLastDataBySensorType_call method_call = new querySensorLastDataBySensorType_call(requestId, regionCentre, radius, sensorType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorLastDataBySensorType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      private com.afarcloud.thrift.SensorType sensorType;
      public querySensorLastDataBySensorType_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
        this.sensorType = sensorType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorLastDataBySensorType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorLastDataBySensorType_args args = new querySensorLastDataBySensorType_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.setSensorType(sensorType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorLastDataBySensorType();
      }
    }

    public void querySensorLastDataByObservationType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorLastDataByObservationType_call method_call = new querySensorLastDataByObservationType_call(requestId, regionCentre, radius, obserType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorLastDataByObservationType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      private com.afarcloud.thrift.ObservationType obserType;
      public querySensorLastDataByObservationType_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
        this.obserType = obserType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorLastDataByObservationType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorLastDataByObservationType_args args = new querySensorLastDataByObservationType_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.setObserType(obserType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorLastDataByObservationType();
      }
    }

    public void queryCollarLastData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCollarLastData_call method_call = new queryCollarLastData_call(requestId, regionCentre, radius, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCollarLastData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      public queryCollarLastData_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCollarLastData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCollarLastData_args args = new queryCollarLastData_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.CollarData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCollarLastData();
      }
    }

    public void queryCollarLastDataByCollarUid(int requestId, String collarUid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCollarLastDataByCollarUid_call method_call = new queryCollarLastDataByCollarUid_call(requestId, collarUid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCollarLastDataByCollarUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private String collarUid;
      public queryCollarLastDataByCollarUid_call(int requestId, String collarUid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.collarUid = collarUid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCollarLastDataByCollarUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCollarLastDataByCollarUid_args args = new queryCollarLastDataByCollarUid_args();
        args.setRequestId(requestId);
        args.setCollarUid(collarUid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.CollarData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCollarLastDataByCollarUid();
      }
    }

    public void queryVehicleLastStateVector(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryVehicleLastStateVector_call method_call = new queryVehicleLastStateVector_call(requestId, regionCentre, radius, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryVehicleLastStateVector_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      public queryVehicleLastStateVector_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryVehicleLastStateVector", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryVehicleLastStateVector_args args = new queryVehicleLastStateVector_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.StateVector> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryVehicleLastStateVector();
      }
    }

    public void queryVehicleLastStateVectorByVehicleId(int requestId, int vehicleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryVehicleLastStateVectorByVehicleId_call method_call = new queryVehicleLastStateVectorByVehicleId_call(requestId, vehicleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryVehicleLastStateVectorByVehicleId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int vehicleId;
      public queryVehicleLastStateVectorByVehicleId_call(int requestId, int vehicleId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.vehicleId = vehicleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryVehicleLastStateVectorByVehicleId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryVehicleLastStateVectorByVehicleId_args args = new queryVehicleLastStateVectorByVehicleId_args();
        args.setRequestId(requestId);
        args.setVehicleId(vehicleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.StateVector> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryVehicleLastStateVectorByVehicleId();
      }
    }

    public void querySensorHistoricalData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorHistoricalData_call method_call = new querySensorHistoricalData_call(requestId, regionCentre, radius, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorHistoricalData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      private long startTime;
      private long endTime;
      public querySensorHistoricalData_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorHistoricalData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorHistoricalData_args args = new querySensorHistoricalData_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorHistoricalData();
      }
    }

    public void querySensorHistoricalDataBySensorUid(int requestId, String sensorUid, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorHistoricalDataBySensorUid_call method_call = new querySensorHistoricalDataBySensorUid_call(requestId, sensorUid, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorHistoricalDataBySensorUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private String sensorUid;
      private long startTime;
      private long endTime;
      public querySensorHistoricalDataBySensorUid_call(int requestId, String sensorUid, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.sensorUid = sensorUid;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorHistoricalDataBySensorUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorHistoricalDataBySensorUid_args args = new querySensorHistoricalDataBySensorUid_args();
        args.setRequestId(requestId);
        args.setSensorUid(sensorUid);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorHistoricalDataBySensorUid();
      }
    }

    public void querySensorHistoricalDataBySensorType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorHistoricalDataBySensorType_call method_call = new querySensorHistoricalDataBySensorType_call(requestId, regionCentre, radius, sensorType, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorHistoricalDataBySensorType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      private com.afarcloud.thrift.SensorType sensorType;
      private long startTime;
      private long endTime;
      public querySensorHistoricalDataBySensorType_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
        this.sensorType = sensorType;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorHistoricalDataBySensorType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorHistoricalDataBySensorType_args args = new querySensorHistoricalDataBySensorType_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.setSensorType(sensorType);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorHistoricalDataBySensorType();
      }
    }

    public void querySensorHistoricalDataByObservationType(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorHistoricalDataByObservationType_call method_call = new querySensorHistoricalDataByObservationType_call(requestId, regionCentre, radius, obserType, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorHistoricalDataByObservationType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      private com.afarcloud.thrift.ObservationType obserType;
      private long startTime;
      private long endTime;
      public querySensorHistoricalDataByObservationType_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
        this.obserType = obserType;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorHistoricalDataByObservationType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorHistoricalDataByObservationType_args args = new querySensorHistoricalDataByObservationType_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.setObserType(obserType);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorHistoricalDataByObservationType();
      }
    }

    public void queryCollarHistoricalData(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCollarHistoricalData_call method_call = new queryCollarHistoricalData_call(requestId, regionCentre, radius, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCollarHistoricalData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      private long startTime;
      private long endTime;
      public queryCollarHistoricalData_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCollarHistoricalData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCollarHistoricalData_args args = new queryCollarHistoricalData_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.CollarData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCollarHistoricalData();
      }
    }

    public void queryCollarHistoricalDataByCollarUid(int requestId, String collarUid, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCollarHistoricalDataByCollarUid_call method_call = new queryCollarHistoricalDataByCollarUid_call(requestId, collarUid, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCollarHistoricalDataByCollarUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private String collarUid;
      private long startTime;
      private long endTime;
      public queryCollarHistoricalDataByCollarUid_call(int requestId, String collarUid, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.collarUid = collarUid;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCollarHistoricalDataByCollarUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCollarHistoricalDataByCollarUid_args args = new queryCollarHistoricalDataByCollarUid_args();
        args.setRequestId(requestId);
        args.setCollarUid(collarUid);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.CollarData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCollarHistoricalDataByCollarUid();
      }
    }

    public void queryVehicleHistoricalStateVectors(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryVehicleHistoricalStateVectors_call method_call = new queryVehicleHistoricalStateVectors_call(requestId, regionCentre, radius, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryVehicleHistoricalStateVectors_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      private long startTime;
      private long endTime;
      public queryVehicleHistoricalStateVectors_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryVehicleHistoricalStateVectors", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryVehicleHistoricalStateVectors_args args = new queryVehicleHistoricalStateVectors_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.StateVector> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryVehicleHistoricalStateVectors();
      }
    }

    public void queryVehicleHistoricalStateVectorByVehicleId(int requestId, int vehicleId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryVehicleHistoricalStateVectorByVehicleId_call method_call = new queryVehicleHistoricalStateVectorByVehicleId_call(requestId, vehicleId, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryVehicleHistoricalStateVectorByVehicleId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int vehicleId;
      private long startTime;
      private long endTime;
      public queryVehicleHistoricalStateVectorByVehicleId_call(int requestId, int vehicleId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.vehicleId = vehicleId;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryVehicleHistoricalStateVectorByVehicleId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryVehicleHistoricalStateVectorByVehicleId_args args = new queryVehicleHistoricalStateVectorByVehicleId_args();
        args.setRequestId(requestId);
        args.setVehicleId(vehicleId);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.StateVector> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryVehicleHistoricalStateVectorByVehicleId();
      }
    }

    public void storeEvent(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeEvent_call method_call = new storeEvent_call(requestId, missionId, vehicleId, subtype, description, timeReference, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int missionId;
      private int vehicleId;
      private int subtype;
      private String description;
      private long timeReference;
      public storeEvent_call(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.requestId = requestId;
        this.missionId = missionId;
        this.vehicleId = vehicleId;
        this.subtype = subtype;
        this.description = description;
        this.timeReference = timeReference;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeEvent", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        storeEvent_args args = new storeEvent_args();
        args.setRequestId(requestId);
        args.setMissionId(missionId);
        args.setVehicleId(vehicleId);
        args.setSubtype(subtype);
        args.setDescription(description);
        args.setTimeReference(timeReference);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAllVehicles", new getAllVehicles());
      processMap.put("getAllMissions", new getAllMissions());
      processMap.put("getOngoingMissions", new getOngoingMissions());
      processMap.put("getMissionById", new getMissionById());
      processMap.put("getVehicle", new getVehicle());
      processMap.put("querySensorLastData", new querySensorLastData());
      processMap.put("querySensorLastDataBySensorUid", new querySensorLastDataBySensorUid());
      processMap.put("querySensorLastDataBySensorType", new querySensorLastDataBySensorType());
      processMap.put("querySensorLastDataByObservationType", new querySensorLastDataByObservationType());
      processMap.put("queryCollarLastData", new queryCollarLastData());
      processMap.put("queryCollarLastDataByCollarUid", new queryCollarLastDataByCollarUid());
      processMap.put("queryVehicleLastStateVector", new queryVehicleLastStateVector());
      processMap.put("queryVehicleLastStateVectorByVehicleId", new queryVehicleLastStateVectorByVehicleId());
      processMap.put("querySensorHistoricalData", new querySensorHistoricalData());
      processMap.put("querySensorHistoricalDataBySensorUid", new querySensorHistoricalDataBySensorUid());
      processMap.put("querySensorHistoricalDataBySensorType", new querySensorHistoricalDataBySensorType());
      processMap.put("querySensorHistoricalDataByObservationType", new querySensorHistoricalDataByObservationType());
      processMap.put("queryCollarHistoricalData", new queryCollarHistoricalData());
      processMap.put("queryCollarHistoricalDataByCollarUid", new queryCollarHistoricalDataByCollarUid());
      processMap.put("queryVehicleHistoricalStateVectors", new queryVehicleHistoricalStateVectors());
      processMap.put("queryVehicleHistoricalStateVectorByVehicleId", new queryVehicleHistoricalStateVectorByVehicleId());
      processMap.put("storeEvent", new storeEvent());
      processMap.put("ping", new ping());
      return processMap;
    }

    public static class getAllVehicles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllVehicles_args> {
      public getAllVehicles() {
        super("getAllVehicles");
      }

      public getAllVehicles_args getEmptyArgsInstance() {
        return new getAllVehicles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllVehicles_result getResult(I iface, getAllVehicles_args args) throws org.apache.thrift.TException {
        getAllVehicles_result result = new getAllVehicles_result();
        result.success = iface.getAllVehicles(args.requestId);
        return result;
      }
    }

    public static class getAllMissions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllMissions_args> {
      public getAllMissions() {
        super("getAllMissions");
      }

      public getAllMissions_args getEmptyArgsInstance() {
        return new getAllMissions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllMissions_result getResult(I iface, getAllMissions_args args) throws org.apache.thrift.TException {
        getAllMissions_result result = new getAllMissions_result();
        result.success = iface.getAllMissions(args.requestId);
        return result;
      }
    }

    public static class getOngoingMissions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOngoingMissions_args> {
      public getOngoingMissions() {
        super("getOngoingMissions");
      }

      public getOngoingMissions_args getEmptyArgsInstance() {
        return new getOngoingMissions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOngoingMissions_result getResult(I iface, getOngoingMissions_args args) throws org.apache.thrift.TException {
        getOngoingMissions_result result = new getOngoingMissions_result();
        result.success = iface.getOngoingMissions(args.requestId);
        return result;
      }
    }

    public static class getMissionById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMissionById_args> {
      public getMissionById() {
        super("getMissionById");
      }

      public getMissionById_args getEmptyArgsInstance() {
        return new getMissionById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMissionById_result getResult(I iface, getMissionById_args args) throws org.apache.thrift.TException {
        getMissionById_result result = new getMissionById_result();
        result.success = iface.getMissionById(args.requestId, args.missionId);
        return result;
      }
    }

    public static class getVehicle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVehicle_args> {
      public getVehicle() {
        super("getVehicle");
      }

      public getVehicle_args getEmptyArgsInstance() {
        return new getVehicle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVehicle_result getResult(I iface, getVehicle_args args) throws org.apache.thrift.TException {
        getVehicle_result result = new getVehicle_result();
        result.success = iface.getVehicle(args.requestId, args.vid);
        return result;
      }
    }

    public static class querySensorLastData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorLastData_args> {
      public querySensorLastData() {
        super("querySensorLastData");
      }

      public querySensorLastData_args getEmptyArgsInstance() {
        return new querySensorLastData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorLastData_result getResult(I iface, querySensorLastData_args args) throws org.apache.thrift.TException {
        querySensorLastData_result result = new querySensorLastData_result();
        result.success = iface.querySensorLastData(args.requestId, args.regionCentre, args.radius);
        return result;
      }
    }

    public static class querySensorLastDataBySensorUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorLastDataBySensorUid_args> {
      public querySensorLastDataBySensorUid() {
        super("querySensorLastDataBySensorUid");
      }

      public querySensorLastDataBySensorUid_args getEmptyArgsInstance() {
        return new querySensorLastDataBySensorUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorLastDataBySensorUid_result getResult(I iface, querySensorLastDataBySensorUid_args args) throws org.apache.thrift.TException {
        querySensorLastDataBySensorUid_result result = new querySensorLastDataBySensorUid_result();
        result.success = iface.querySensorLastDataBySensorUid(args.requestId, args.sensorUid);
        return result;
      }
    }

    public static class querySensorLastDataBySensorType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorLastDataBySensorType_args> {
      public querySensorLastDataBySensorType() {
        super("querySensorLastDataBySensorType");
      }

      public querySensorLastDataBySensorType_args getEmptyArgsInstance() {
        return new querySensorLastDataBySensorType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorLastDataBySensorType_result getResult(I iface, querySensorLastDataBySensorType_args args) throws org.apache.thrift.TException {
        querySensorLastDataBySensorType_result result = new querySensorLastDataBySensorType_result();
        result.success = iface.querySensorLastDataBySensorType(args.requestId, args.regionCentre, args.radius, args.sensorType);
        return result;
      }
    }

    public static class querySensorLastDataByObservationType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorLastDataByObservationType_args> {
      public querySensorLastDataByObservationType() {
        super("querySensorLastDataByObservationType");
      }

      public querySensorLastDataByObservationType_args getEmptyArgsInstance() {
        return new querySensorLastDataByObservationType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorLastDataByObservationType_result getResult(I iface, querySensorLastDataByObservationType_args args) throws org.apache.thrift.TException {
        querySensorLastDataByObservationType_result result = new querySensorLastDataByObservationType_result();
        result.success = iface.querySensorLastDataByObservationType(args.requestId, args.regionCentre, args.radius, args.obserType);
        return result;
      }
    }

    public static class queryCollarLastData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCollarLastData_args> {
      public queryCollarLastData() {
        super("queryCollarLastData");
      }

      public queryCollarLastData_args getEmptyArgsInstance() {
        return new queryCollarLastData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCollarLastData_result getResult(I iface, queryCollarLastData_args args) throws org.apache.thrift.TException {
        queryCollarLastData_result result = new queryCollarLastData_result();
        result.success = iface.queryCollarLastData(args.requestId, args.regionCentre, args.radius);
        return result;
      }
    }

    public static class queryCollarLastDataByCollarUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCollarLastDataByCollarUid_args> {
      public queryCollarLastDataByCollarUid() {
        super("queryCollarLastDataByCollarUid");
      }

      public queryCollarLastDataByCollarUid_args getEmptyArgsInstance() {
        return new queryCollarLastDataByCollarUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCollarLastDataByCollarUid_result getResult(I iface, queryCollarLastDataByCollarUid_args args) throws org.apache.thrift.TException {
        queryCollarLastDataByCollarUid_result result = new queryCollarLastDataByCollarUid_result();
        result.success = iface.queryCollarLastDataByCollarUid(args.requestId, args.collarUid);
        return result;
      }
    }

    public static class queryVehicleLastStateVector<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryVehicleLastStateVector_args> {
      public queryVehicleLastStateVector() {
        super("queryVehicleLastStateVector");
      }

      public queryVehicleLastStateVector_args getEmptyArgsInstance() {
        return new queryVehicleLastStateVector_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryVehicleLastStateVector_result getResult(I iface, queryVehicleLastStateVector_args args) throws org.apache.thrift.TException {
        queryVehicleLastStateVector_result result = new queryVehicleLastStateVector_result();
        result.success = iface.queryVehicleLastStateVector(args.requestId, args.regionCentre, args.radius);
        return result;
      }
    }

    public static class queryVehicleLastStateVectorByVehicleId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryVehicleLastStateVectorByVehicleId_args> {
      public queryVehicleLastStateVectorByVehicleId() {
        super("queryVehicleLastStateVectorByVehicleId");
      }

      public queryVehicleLastStateVectorByVehicleId_args getEmptyArgsInstance() {
        return new queryVehicleLastStateVectorByVehicleId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryVehicleLastStateVectorByVehicleId_result getResult(I iface, queryVehicleLastStateVectorByVehicleId_args args) throws org.apache.thrift.TException {
        queryVehicleLastStateVectorByVehicleId_result result = new queryVehicleLastStateVectorByVehicleId_result();
        result.success = iface.queryVehicleLastStateVectorByVehicleId(args.requestId, args.vehicleId);
        return result;
      }
    }

    public static class querySensorHistoricalData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorHistoricalData_args> {
      public querySensorHistoricalData() {
        super("querySensorHistoricalData");
      }

      public querySensorHistoricalData_args getEmptyArgsInstance() {
        return new querySensorHistoricalData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorHistoricalData_result getResult(I iface, querySensorHistoricalData_args args) throws org.apache.thrift.TException {
        querySensorHistoricalData_result result = new querySensorHistoricalData_result();
        result.success = iface.querySensorHistoricalData(args.requestId, args.regionCentre, args.radius, args.startTime, args.endTime);
        return result;
      }
    }

    public static class querySensorHistoricalDataBySensorUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorHistoricalDataBySensorUid_args> {
      public querySensorHistoricalDataBySensorUid() {
        super("querySensorHistoricalDataBySensorUid");
      }

      public querySensorHistoricalDataBySensorUid_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataBySensorUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorHistoricalDataBySensorUid_result getResult(I iface, querySensorHistoricalDataBySensorUid_args args) throws org.apache.thrift.TException {
        querySensorHistoricalDataBySensorUid_result result = new querySensorHistoricalDataBySensorUid_result();
        result.success = iface.querySensorHistoricalDataBySensorUid(args.requestId, args.sensorUid, args.startTime, args.endTime);
        return result;
      }
    }

    public static class querySensorHistoricalDataBySensorType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorHistoricalDataBySensorType_args> {
      public querySensorHistoricalDataBySensorType() {
        super("querySensorHistoricalDataBySensorType");
      }

      public querySensorHistoricalDataBySensorType_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataBySensorType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorHistoricalDataBySensorType_result getResult(I iface, querySensorHistoricalDataBySensorType_args args) throws org.apache.thrift.TException {
        querySensorHistoricalDataBySensorType_result result = new querySensorHistoricalDataBySensorType_result();
        result.success = iface.querySensorHistoricalDataBySensorType(args.requestId, args.regionCentre, args.radius, args.sensorType, args.startTime, args.endTime);
        return result;
      }
    }

    public static class querySensorHistoricalDataByObservationType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorHistoricalDataByObservationType_args> {
      public querySensorHistoricalDataByObservationType() {
        super("querySensorHistoricalDataByObservationType");
      }

      public querySensorHistoricalDataByObservationType_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataByObservationType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorHistoricalDataByObservationType_result getResult(I iface, querySensorHistoricalDataByObservationType_args args) throws org.apache.thrift.TException {
        querySensorHistoricalDataByObservationType_result result = new querySensorHistoricalDataByObservationType_result();
        result.success = iface.querySensorHistoricalDataByObservationType(args.requestId, args.regionCentre, args.radius, args.obserType, args.startTime, args.endTime);
        return result;
      }
    }

    public static class queryCollarHistoricalData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCollarHistoricalData_args> {
      public queryCollarHistoricalData() {
        super("queryCollarHistoricalData");
      }

      public queryCollarHistoricalData_args getEmptyArgsInstance() {
        return new queryCollarHistoricalData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCollarHistoricalData_result getResult(I iface, queryCollarHistoricalData_args args) throws org.apache.thrift.TException {
        queryCollarHistoricalData_result result = new queryCollarHistoricalData_result();
        result.success = iface.queryCollarHistoricalData(args.requestId, args.regionCentre, args.radius, args.startTime, args.endTime);
        return result;
      }
    }

    public static class queryCollarHistoricalDataByCollarUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCollarHistoricalDataByCollarUid_args> {
      public queryCollarHistoricalDataByCollarUid() {
        super("queryCollarHistoricalDataByCollarUid");
      }

      public queryCollarHistoricalDataByCollarUid_args getEmptyArgsInstance() {
        return new queryCollarHistoricalDataByCollarUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCollarHistoricalDataByCollarUid_result getResult(I iface, queryCollarHistoricalDataByCollarUid_args args) throws org.apache.thrift.TException {
        queryCollarHistoricalDataByCollarUid_result result = new queryCollarHistoricalDataByCollarUid_result();
        result.success = iface.queryCollarHistoricalDataByCollarUid(args.requestId, args.collarUid, args.startTime, args.endTime);
        return result;
      }
    }

    public static class queryVehicleHistoricalStateVectors<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryVehicleHistoricalStateVectors_args> {
      public queryVehicleHistoricalStateVectors() {
        super("queryVehicleHistoricalStateVectors");
      }

      public queryVehicleHistoricalStateVectors_args getEmptyArgsInstance() {
        return new queryVehicleHistoricalStateVectors_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryVehicleHistoricalStateVectors_result getResult(I iface, queryVehicleHistoricalStateVectors_args args) throws org.apache.thrift.TException {
        queryVehicleHistoricalStateVectors_result result = new queryVehicleHistoricalStateVectors_result();
        result.success = iface.queryVehicleHistoricalStateVectors(args.requestId, args.regionCentre, args.radius, args.startTime, args.endTime);
        return result;
      }
    }

    public static class queryVehicleHistoricalStateVectorByVehicleId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryVehicleHistoricalStateVectorByVehicleId_args> {
      public queryVehicleHistoricalStateVectorByVehicleId() {
        super("queryVehicleHistoricalStateVectorByVehicleId");
      }

      public queryVehicleHistoricalStateVectorByVehicleId_args getEmptyArgsInstance() {
        return new queryVehicleHistoricalStateVectorByVehicleId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryVehicleHistoricalStateVectorByVehicleId_result getResult(I iface, queryVehicleHistoricalStateVectorByVehicleId_args args) throws org.apache.thrift.TException {
        queryVehicleHistoricalStateVectorByVehicleId_result result = new queryVehicleHistoricalStateVectorByVehicleId_result();
        result.success = iface.queryVehicleHistoricalStateVectorByVehicleId(args.requestId, args.vehicleId, args.startTime, args.endTime);
        return result;
      }
    }

    public static class storeEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeEvent_args> {
      public storeEvent() {
        super("storeEvent");
      }

      public storeEvent_args getEmptyArgsInstance() {
        return new storeEvent_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, storeEvent_args args) throws org.apache.thrift.TException {
        iface.storeEvent(args.requestId, args.missionId, args.vehicleId, args.subtype, args.description, args.timeReference);
        return null;
      }
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAllVehicles", new getAllVehicles());
      processMap.put("getAllMissions", new getAllMissions());
      processMap.put("getOngoingMissions", new getOngoingMissions());
      processMap.put("getMissionById", new getMissionById());
      processMap.put("getVehicle", new getVehicle());
      processMap.put("querySensorLastData", new querySensorLastData());
      processMap.put("querySensorLastDataBySensorUid", new querySensorLastDataBySensorUid());
      processMap.put("querySensorLastDataBySensorType", new querySensorLastDataBySensorType());
      processMap.put("querySensorLastDataByObservationType", new querySensorLastDataByObservationType());
      processMap.put("queryCollarLastData", new queryCollarLastData());
      processMap.put("queryCollarLastDataByCollarUid", new queryCollarLastDataByCollarUid());
      processMap.put("queryVehicleLastStateVector", new queryVehicleLastStateVector());
      processMap.put("queryVehicleLastStateVectorByVehicleId", new queryVehicleLastStateVectorByVehicleId());
      processMap.put("querySensorHistoricalData", new querySensorHistoricalData());
      processMap.put("querySensorHistoricalDataBySensorUid", new querySensorHistoricalDataBySensorUid());
      processMap.put("querySensorHistoricalDataBySensorType", new querySensorHistoricalDataBySensorType());
      processMap.put("querySensorHistoricalDataByObservationType", new querySensorHistoricalDataByObservationType());
      processMap.put("queryCollarHistoricalData", new queryCollarHistoricalData());
      processMap.put("queryCollarHistoricalDataByCollarUid", new queryCollarHistoricalDataByCollarUid());
      processMap.put("queryVehicleHistoricalStateVectors", new queryVehicleHistoricalStateVectors());
      processMap.put("queryVehicleHistoricalStateVectorByVehicleId", new queryVehicleHistoricalStateVectorByVehicleId());
      processMap.put("storeEvent", new storeEvent());
      processMap.put("ping", new ping());
      return processMap;
    }

    public static class getAllVehicles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllVehicles_args, List<com.afarcloud.thrift.Vehicle>> {
      public getAllVehicles() {
        super("getAllVehicles");
      }

      public getAllVehicles_args getEmptyArgsInstance() {
        return new getAllVehicles_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.Vehicle>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.Vehicle>>() { 
          public void onComplete(List<com.afarcloud.thrift.Vehicle> o) {
            getAllVehicles_result result = new getAllVehicles_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllVehicles_result result = new getAllVehicles_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllVehicles_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.Vehicle>> resultHandler) throws TException {
        iface.getAllVehicles(args.requestId,resultHandler);
      }
    }

    public static class getAllMissions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllMissions_args, List<com.afarcloud.thrift.MissionTag>> {
      public getAllMissions() {
        super("getAllMissions");
      }

      public getAllMissions_args getEmptyArgsInstance() {
        return new getAllMissions_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.MissionTag>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.MissionTag>>() { 
          public void onComplete(List<com.afarcloud.thrift.MissionTag> o) {
            getAllMissions_result result = new getAllMissions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllMissions_result result = new getAllMissions_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllMissions_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.MissionTag>> resultHandler) throws TException {
        iface.getAllMissions(args.requestId,resultHandler);
      }
    }

    public static class getOngoingMissions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOngoingMissions_args, List<com.afarcloud.thrift.MissionTag>> {
      public getOngoingMissions() {
        super("getOngoingMissions");
      }

      public getOngoingMissions_args getEmptyArgsInstance() {
        return new getOngoingMissions_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.MissionTag>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.MissionTag>>() { 
          public void onComplete(List<com.afarcloud.thrift.MissionTag> o) {
            getOngoingMissions_result result = new getOngoingMissions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOngoingMissions_result result = new getOngoingMissions_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOngoingMissions_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.MissionTag>> resultHandler) throws TException {
        iface.getOngoingMissions(args.requestId,resultHandler);
      }
    }

    public static class getMissionById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMissionById_args, com.afarcloud.thrift.Mission> {
      public getMissionById() {
        super("getMissionById");
      }

      public getMissionById_args getEmptyArgsInstance() {
        return new getMissionById_args();
      }

      public AsyncMethodCallback<com.afarcloud.thrift.Mission> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.afarcloud.thrift.Mission>() { 
          public void onComplete(com.afarcloud.thrift.Mission o) {
            getMissionById_result result = new getMissionById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMissionById_result result = new getMissionById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMissionById_args args, org.apache.thrift.async.AsyncMethodCallback<com.afarcloud.thrift.Mission> resultHandler) throws TException {
        iface.getMissionById(args.requestId, args.missionId,resultHandler);
      }
    }

    public static class getVehicle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVehicle_args, com.afarcloud.thrift.Vehicle> {
      public getVehicle() {
        super("getVehicle");
      }

      public getVehicle_args getEmptyArgsInstance() {
        return new getVehicle_args();
      }

      public AsyncMethodCallback<com.afarcloud.thrift.Vehicle> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.afarcloud.thrift.Vehicle>() { 
          public void onComplete(com.afarcloud.thrift.Vehicle o) {
            getVehicle_result result = new getVehicle_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVehicle_result result = new getVehicle_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVehicle_args args, org.apache.thrift.async.AsyncMethodCallback<com.afarcloud.thrift.Vehicle> resultHandler) throws TException {
        iface.getVehicle(args.requestId, args.vid,resultHandler);
      }
    }

    public static class querySensorLastData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorLastData_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorLastData() {
        super("querySensorLastData");
      }

      public querySensorLastData_args getEmptyArgsInstance() {
        return new querySensorLastData_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorLastData_result result = new querySensorLastData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorLastData_result result = new querySensorLastData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorLastData_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorLastData(args.requestId, args.regionCentre, args.radius,resultHandler);
      }
    }

    public static class querySensorLastDataBySensorUid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorLastDataBySensorUid_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorLastDataBySensorUid() {
        super("querySensorLastDataBySensorUid");
      }

      public querySensorLastDataBySensorUid_args getEmptyArgsInstance() {
        return new querySensorLastDataBySensorUid_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorLastDataBySensorUid_result result = new querySensorLastDataBySensorUid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorLastDataBySensorUid_result result = new querySensorLastDataBySensorUid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorLastDataBySensorUid_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorLastDataBySensorUid(args.requestId, args.sensorUid,resultHandler);
      }
    }

    public static class querySensorLastDataBySensorType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorLastDataBySensorType_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorLastDataBySensorType() {
        super("querySensorLastDataBySensorType");
      }

      public querySensorLastDataBySensorType_args getEmptyArgsInstance() {
        return new querySensorLastDataBySensorType_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorLastDataBySensorType_result result = new querySensorLastDataBySensorType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorLastDataBySensorType_result result = new querySensorLastDataBySensorType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorLastDataBySensorType_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorLastDataBySensorType(args.requestId, args.regionCentre, args.radius, args.sensorType,resultHandler);
      }
    }

    public static class querySensorLastDataByObservationType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorLastDataByObservationType_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorLastDataByObservationType() {
        super("querySensorLastDataByObservationType");
      }

      public querySensorLastDataByObservationType_args getEmptyArgsInstance() {
        return new querySensorLastDataByObservationType_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorLastDataByObservationType_result result = new querySensorLastDataByObservationType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorLastDataByObservationType_result result = new querySensorLastDataByObservationType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorLastDataByObservationType_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorLastDataByObservationType(args.requestId, args.regionCentre, args.radius, args.obserType,resultHandler);
      }
    }

    public static class queryCollarLastData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCollarLastData_args, List<com.afarcloud.thrift.CollarData>> {
      public queryCollarLastData() {
        super("queryCollarLastData");
      }

      public queryCollarLastData_args getEmptyArgsInstance() {
        return new queryCollarLastData_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>>() { 
          public void onComplete(List<com.afarcloud.thrift.CollarData> o) {
            queryCollarLastData_result result = new queryCollarLastData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCollarLastData_result result = new queryCollarLastData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCollarLastData_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> resultHandler) throws TException {
        iface.queryCollarLastData(args.requestId, args.regionCentre, args.radius,resultHandler);
      }
    }

    public static class queryCollarLastDataByCollarUid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCollarLastDataByCollarUid_args, List<com.afarcloud.thrift.CollarData>> {
      public queryCollarLastDataByCollarUid() {
        super("queryCollarLastDataByCollarUid");
      }

      public queryCollarLastDataByCollarUid_args getEmptyArgsInstance() {
        return new queryCollarLastDataByCollarUid_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>>() { 
          public void onComplete(List<com.afarcloud.thrift.CollarData> o) {
            queryCollarLastDataByCollarUid_result result = new queryCollarLastDataByCollarUid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCollarLastDataByCollarUid_result result = new queryCollarLastDataByCollarUid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCollarLastDataByCollarUid_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> resultHandler) throws TException {
        iface.queryCollarLastDataByCollarUid(args.requestId, args.collarUid,resultHandler);
      }
    }

    public static class queryVehicleLastStateVector<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryVehicleLastStateVector_args, List<com.afarcloud.thrift.StateVector>> {
      public queryVehicleLastStateVector() {
        super("queryVehicleLastStateVector");
      }

      public queryVehicleLastStateVector_args getEmptyArgsInstance() {
        return new queryVehicleLastStateVector_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>>() { 
          public void onComplete(List<com.afarcloud.thrift.StateVector> o) {
            queryVehicleLastStateVector_result result = new queryVehicleLastStateVector_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryVehicleLastStateVector_result result = new queryVehicleLastStateVector_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryVehicleLastStateVector_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> resultHandler) throws TException {
        iface.queryVehicleLastStateVector(args.requestId, args.regionCentre, args.radius,resultHandler);
      }
    }

    public static class queryVehicleLastStateVectorByVehicleId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryVehicleLastStateVectorByVehicleId_args, List<com.afarcloud.thrift.StateVector>> {
      public queryVehicleLastStateVectorByVehicleId() {
        super("queryVehicleLastStateVectorByVehicleId");
      }

      public queryVehicleLastStateVectorByVehicleId_args getEmptyArgsInstance() {
        return new queryVehicleLastStateVectorByVehicleId_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>>() { 
          public void onComplete(List<com.afarcloud.thrift.StateVector> o) {
            queryVehicleLastStateVectorByVehicleId_result result = new queryVehicleLastStateVectorByVehicleId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryVehicleLastStateVectorByVehicleId_result result = new queryVehicleLastStateVectorByVehicleId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryVehicleLastStateVectorByVehicleId_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> resultHandler) throws TException {
        iface.queryVehicleLastStateVectorByVehicleId(args.requestId, args.vehicleId,resultHandler);
      }
    }

    public static class querySensorHistoricalData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorHistoricalData_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorHistoricalData() {
        super("querySensorHistoricalData");
      }

      public querySensorHistoricalData_args getEmptyArgsInstance() {
        return new querySensorHistoricalData_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorHistoricalData_result result = new querySensorHistoricalData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorHistoricalData_result result = new querySensorHistoricalData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorHistoricalData_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorHistoricalData(args.requestId, args.regionCentre, args.radius, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class querySensorHistoricalDataBySensorUid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorHistoricalDataBySensorUid_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorHistoricalDataBySensorUid() {
        super("querySensorHistoricalDataBySensorUid");
      }

      public querySensorHistoricalDataBySensorUid_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataBySensorUid_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorHistoricalDataBySensorUid_result result = new querySensorHistoricalDataBySensorUid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorHistoricalDataBySensorUid_result result = new querySensorHistoricalDataBySensorUid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorHistoricalDataBySensorUid_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorHistoricalDataBySensorUid(args.requestId, args.sensorUid, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class querySensorHistoricalDataBySensorType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorHistoricalDataBySensorType_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorHistoricalDataBySensorType() {
        super("querySensorHistoricalDataBySensorType");
      }

      public querySensorHistoricalDataBySensorType_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataBySensorType_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorHistoricalDataBySensorType_result result = new querySensorHistoricalDataBySensorType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorHistoricalDataBySensorType_result result = new querySensorHistoricalDataBySensorType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorHistoricalDataBySensorType_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorHistoricalDataBySensorType(args.requestId, args.regionCentre, args.radius, args.sensorType, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class querySensorHistoricalDataByObservationType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorHistoricalDataByObservationType_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorHistoricalDataByObservationType() {
        super("querySensorHistoricalDataByObservationType");
      }

      public querySensorHistoricalDataByObservationType_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataByObservationType_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorHistoricalDataByObservationType_result result = new querySensorHistoricalDataByObservationType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorHistoricalDataByObservationType_result result = new querySensorHistoricalDataByObservationType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorHistoricalDataByObservationType_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorHistoricalDataByObservationType(args.requestId, args.regionCentre, args.radius, args.obserType, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class queryCollarHistoricalData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCollarHistoricalData_args, List<com.afarcloud.thrift.CollarData>> {
      public queryCollarHistoricalData() {
        super("queryCollarHistoricalData");
      }

      public queryCollarHistoricalData_args getEmptyArgsInstance() {
        return new queryCollarHistoricalData_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>>() { 
          public void onComplete(List<com.afarcloud.thrift.CollarData> o) {
            queryCollarHistoricalData_result result = new queryCollarHistoricalData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCollarHistoricalData_result result = new queryCollarHistoricalData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCollarHistoricalData_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> resultHandler) throws TException {
        iface.queryCollarHistoricalData(args.requestId, args.regionCentre, args.radius, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class queryCollarHistoricalDataByCollarUid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCollarHistoricalDataByCollarUid_args, List<com.afarcloud.thrift.CollarData>> {
      public queryCollarHistoricalDataByCollarUid() {
        super("queryCollarHistoricalDataByCollarUid");
      }

      public queryCollarHistoricalDataByCollarUid_args getEmptyArgsInstance() {
        return new queryCollarHistoricalDataByCollarUid_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>>() { 
          public void onComplete(List<com.afarcloud.thrift.CollarData> o) {
            queryCollarHistoricalDataByCollarUid_result result = new queryCollarHistoricalDataByCollarUid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCollarHistoricalDataByCollarUid_result result = new queryCollarHistoricalDataByCollarUid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCollarHistoricalDataByCollarUid_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> resultHandler) throws TException {
        iface.queryCollarHistoricalDataByCollarUid(args.requestId, args.collarUid, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class queryVehicleHistoricalStateVectors<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryVehicleHistoricalStateVectors_args, List<com.afarcloud.thrift.StateVector>> {
      public queryVehicleHistoricalStateVectors() {
        super("queryVehicleHistoricalStateVectors");
      }

      public queryVehicleHistoricalStateVectors_args getEmptyArgsInstance() {
        return new queryVehicleHistoricalStateVectors_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>>() { 
          public void onComplete(List<com.afarcloud.thrift.StateVector> o) {
            queryVehicleHistoricalStateVectors_result result = new queryVehicleHistoricalStateVectors_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryVehicleHistoricalStateVectors_result result = new queryVehicleHistoricalStateVectors_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryVehicleHistoricalStateVectors_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> resultHandler) throws TException {
        iface.queryVehicleHistoricalStateVectors(args.requestId, args.regionCentre, args.radius, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class queryVehicleHistoricalStateVectorByVehicleId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryVehicleHistoricalStateVectorByVehicleId_args, List<com.afarcloud.thrift.StateVector>> {
      public queryVehicleHistoricalStateVectorByVehicleId() {
        super("queryVehicleHistoricalStateVectorByVehicleId");
      }

      public queryVehicleHistoricalStateVectorByVehicleId_args getEmptyArgsInstance() {
        return new queryVehicleHistoricalStateVectorByVehicleId_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>>() { 
          public void onComplete(List<com.afarcloud.thrift.StateVector> o) {
            queryVehicleHistoricalStateVectorByVehicleId_result result = new queryVehicleHistoricalStateVectorByVehicleId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryVehicleHistoricalStateVectorByVehicleId_result result = new queryVehicleHistoricalStateVectorByVehicleId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryVehicleHistoricalStateVectorByVehicleId_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> resultHandler) throws TException {
        iface.queryVehicleHistoricalStateVectorByVehicleId(args.requestId, args.vehicleId, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class storeEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeEvent_args, Void> {
      public storeEvent() {
        super("storeEvent");
      }

      public storeEvent_args getEmptyArgsInstance() {
        return new storeEvent_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, storeEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.storeEvent(args.requestId, args.missionId, args.vehicleId, args.subtype, args.description, args.timeReference,resultHandler);
      }
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, String> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            ping_result result = new ping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.ping(resultHandler);
      }
    }

  }

  public static class getAllVehicles_args implements org.apache.thrift.TBase<getAllVehicles_args, getAllVehicles_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllVehicles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllVehicles_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllVehicles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllVehicles_argsTupleSchemeFactory());
    }

    public int requestId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllVehicles_args.class, metaDataMap);
    }

    public getAllVehicles_args() {
    }

    public getAllVehicles_args(
      int requestId)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllVehicles_args(getAllVehicles_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
    }

    public getAllVehicles_args deepCopy() {
      return new getAllVehicles_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public getAllVehicles_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllVehicles_args)
        return this.equals((getAllVehicles_args)that);
      return false;
    }

    public boolean equals(getAllVehicles_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllVehicles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllVehicles_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllVehicles_argsStandardSchemeFactory implements SchemeFactory {
      public getAllVehicles_argsStandardScheme getScheme() {
        return new getAllVehicles_argsStandardScheme();
      }
    }

    private static class getAllVehicles_argsStandardScheme extends StandardScheme<getAllVehicles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllVehicles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllVehicles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllVehicles_argsTupleSchemeFactory implements SchemeFactory {
      public getAllVehicles_argsTupleScheme getScheme() {
        return new getAllVehicles_argsTupleScheme();
      }
    }

    private static class getAllVehicles_argsTupleScheme extends TupleScheme<getAllVehicles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllVehicles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllVehicles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
      }
    }

  }

  public static class getAllVehicles_result implements org.apache.thrift.TBase<getAllVehicles_result, getAllVehicles_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllVehicles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllVehicles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllVehicles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllVehicles_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.Vehicle> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Vehicle.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllVehicles_result.class, metaDataMap);
    }

    public getAllVehicles_result() {
    }

    public getAllVehicles_result(
      List<com.afarcloud.thrift.Vehicle> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllVehicles_result(getAllVehicles_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.Vehicle> __this__success = new ArrayList<com.afarcloud.thrift.Vehicle>(other.success.size());
        for (com.afarcloud.thrift.Vehicle other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.Vehicle(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllVehicles_result deepCopy() {
      return new getAllVehicles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.Vehicle> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.Vehicle elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.Vehicle>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.Vehicle> getSuccess() {
      return this.success;
    }

    public getAllVehicles_result setSuccess(List<com.afarcloud.thrift.Vehicle> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.Vehicle>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllVehicles_result)
        return this.equals((getAllVehicles_result)that);
      return false;
    }

    public boolean equals(getAllVehicles_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllVehicles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllVehicles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllVehicles_resultStandardSchemeFactory implements SchemeFactory {
      public getAllVehicles_resultStandardScheme getScheme() {
        return new getAllVehicles_resultStandardScheme();
      }
    }

    private static class getAllVehicles_resultStandardScheme extends StandardScheme<getAllVehicles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllVehicles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.Vehicle>(_list0.size);
                  com.afarcloud.thrift.Vehicle _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.afarcloud.thrift.Vehicle();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllVehicles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.Vehicle _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllVehicles_resultTupleSchemeFactory implements SchemeFactory {
      public getAllVehicles_resultTupleScheme getScheme() {
        return new getAllVehicles_resultTupleScheme();
      }
    }

    private static class getAllVehicles_resultTupleScheme extends TupleScheme<getAllVehicles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllVehicles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.Vehicle _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllVehicles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.Vehicle>(_list5.size);
            com.afarcloud.thrift.Vehicle _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.afarcloud.thrift.Vehicle();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllMissions_args implements org.apache.thrift.TBase<getAllMissions_args, getAllMissions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllMissions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllMissions_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllMissions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllMissions_argsTupleSchemeFactory());
    }

    public int requestId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllMissions_args.class, metaDataMap);
    }

    public getAllMissions_args() {
    }

    public getAllMissions_args(
      int requestId)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllMissions_args(getAllMissions_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
    }

    public getAllMissions_args deepCopy() {
      return new getAllMissions_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public getAllMissions_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllMissions_args)
        return this.equals((getAllMissions_args)that);
      return false;
    }

    public boolean equals(getAllMissions_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllMissions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllMissions_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllMissions_argsStandardSchemeFactory implements SchemeFactory {
      public getAllMissions_argsStandardScheme getScheme() {
        return new getAllMissions_argsStandardScheme();
      }
    }

    private static class getAllMissions_argsStandardScheme extends StandardScheme<getAllMissions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllMissions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllMissions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllMissions_argsTupleSchemeFactory implements SchemeFactory {
      public getAllMissions_argsTupleScheme getScheme() {
        return new getAllMissions_argsTupleScheme();
      }
    }

    private static class getAllMissions_argsTupleScheme extends TupleScheme<getAllMissions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllMissions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllMissions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
      }
    }

  }

  public static class getAllMissions_result implements org.apache.thrift.TBase<getAllMissions_result, getAllMissions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllMissions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllMissions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllMissions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllMissions_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.MissionTag> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.MissionTag.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllMissions_result.class, metaDataMap);
    }

    public getAllMissions_result() {
    }

    public getAllMissions_result(
      List<com.afarcloud.thrift.MissionTag> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllMissions_result(getAllMissions_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.MissionTag> __this__success = new ArrayList<com.afarcloud.thrift.MissionTag>(other.success.size());
        for (com.afarcloud.thrift.MissionTag other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.MissionTag(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllMissions_result deepCopy() {
      return new getAllMissions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.MissionTag> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.MissionTag elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.MissionTag>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.MissionTag> getSuccess() {
      return this.success;
    }

    public getAllMissions_result setSuccess(List<com.afarcloud.thrift.MissionTag> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.MissionTag>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllMissions_result)
        return this.equals((getAllMissions_result)that);
      return false;
    }

    public boolean equals(getAllMissions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllMissions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllMissions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllMissions_resultStandardSchemeFactory implements SchemeFactory {
      public getAllMissions_resultStandardScheme getScheme() {
        return new getAllMissions_resultStandardScheme();
      }
    }

    private static class getAllMissions_resultStandardScheme extends StandardScheme<getAllMissions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllMissions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.MissionTag>(_list8.size);
                  com.afarcloud.thrift.MissionTag _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.afarcloud.thrift.MissionTag();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllMissions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.MissionTag _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllMissions_resultTupleSchemeFactory implements SchemeFactory {
      public getAllMissions_resultTupleScheme getScheme() {
        return new getAllMissions_resultTupleScheme();
      }
    }

    private static class getAllMissions_resultTupleScheme extends TupleScheme<getAllMissions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllMissions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.MissionTag _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllMissions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.MissionTag>(_list13.size);
            com.afarcloud.thrift.MissionTag _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.afarcloud.thrift.MissionTag();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOngoingMissions_args implements org.apache.thrift.TBase<getOngoingMissions_args, getOngoingMissions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOngoingMissions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOngoingMissions_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOngoingMissions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOngoingMissions_argsTupleSchemeFactory());
    }

    public int requestId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOngoingMissions_args.class, metaDataMap);
    }

    public getOngoingMissions_args() {
    }

    public getOngoingMissions_args(
      int requestId)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOngoingMissions_args(getOngoingMissions_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
    }

    public getOngoingMissions_args deepCopy() {
      return new getOngoingMissions_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public getOngoingMissions_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOngoingMissions_args)
        return this.equals((getOngoingMissions_args)that);
      return false;
    }

    public boolean equals(getOngoingMissions_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOngoingMissions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOngoingMissions_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOngoingMissions_argsStandardSchemeFactory implements SchemeFactory {
      public getOngoingMissions_argsStandardScheme getScheme() {
        return new getOngoingMissions_argsStandardScheme();
      }
    }

    private static class getOngoingMissions_argsStandardScheme extends StandardScheme<getOngoingMissions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOngoingMissions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOngoingMissions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOngoingMissions_argsTupleSchemeFactory implements SchemeFactory {
      public getOngoingMissions_argsTupleScheme getScheme() {
        return new getOngoingMissions_argsTupleScheme();
      }
    }

    private static class getOngoingMissions_argsTupleScheme extends TupleScheme<getOngoingMissions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOngoingMissions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOngoingMissions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
      }
    }

  }

  public static class getOngoingMissions_result implements org.apache.thrift.TBase<getOngoingMissions_result, getOngoingMissions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOngoingMissions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOngoingMissions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOngoingMissions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOngoingMissions_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.MissionTag> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.MissionTag.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOngoingMissions_result.class, metaDataMap);
    }

    public getOngoingMissions_result() {
    }

    public getOngoingMissions_result(
      List<com.afarcloud.thrift.MissionTag> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOngoingMissions_result(getOngoingMissions_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.MissionTag> __this__success = new ArrayList<com.afarcloud.thrift.MissionTag>(other.success.size());
        for (com.afarcloud.thrift.MissionTag other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.MissionTag(other_element));
        }
        this.success = __this__success;
      }
    }

    public getOngoingMissions_result deepCopy() {
      return new getOngoingMissions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.MissionTag> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.MissionTag elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.MissionTag>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.MissionTag> getSuccess() {
      return this.success;
    }

    public getOngoingMissions_result setSuccess(List<com.afarcloud.thrift.MissionTag> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.MissionTag>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOngoingMissions_result)
        return this.equals((getOngoingMissions_result)that);
      return false;
    }

    public boolean equals(getOngoingMissions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOngoingMissions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOngoingMissions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOngoingMissions_resultStandardSchemeFactory implements SchemeFactory {
      public getOngoingMissions_resultStandardScheme getScheme() {
        return new getOngoingMissions_resultStandardScheme();
      }
    }

    private static class getOngoingMissions_resultStandardScheme extends StandardScheme<getOngoingMissions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOngoingMissions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.MissionTag>(_list16.size);
                  com.afarcloud.thrift.MissionTag _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.afarcloud.thrift.MissionTag();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOngoingMissions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.MissionTag _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOngoingMissions_resultTupleSchemeFactory implements SchemeFactory {
      public getOngoingMissions_resultTupleScheme getScheme() {
        return new getOngoingMissions_resultTupleScheme();
      }
    }

    private static class getOngoingMissions_resultTupleScheme extends TupleScheme<getOngoingMissions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOngoingMissions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.MissionTag _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOngoingMissions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.MissionTag>(_list21.size);
            com.afarcloud.thrift.MissionTag _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new com.afarcloud.thrift.MissionTag();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMissionById_args implements org.apache.thrift.TBase<getMissionById_args, getMissionById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMissionById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMissionById_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMissionById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMissionById_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int missionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      MISSION_ID((short)2, "missionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // MISSION_ID
            return MISSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __MISSIONID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMissionById_args.class, metaDataMap);
    }

    public getMissionById_args() {
    }

    public getMissionById_args(
      int requestId,
      int missionId)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.missionId = missionId;
      setMissionIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMissionById_args(getMissionById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.missionId = other.missionId;
    }

    public getMissionById_args deepCopy() {
      return new getMissionById_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setMissionIdIsSet(false);
      this.missionId = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public getMissionById_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getMissionId() {
      return this.missionId;
    }

    public getMissionById_args setMissionId(int missionId) {
      this.missionId = missionId;
      setMissionIdIsSet(true);
      return this;
    }

    public void unsetMissionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return EncodingUtils.testBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    public void setMissionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISSIONID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case MISSION_ID:
        return Integer.valueOf(getMissionId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case MISSION_ID:
        return isSetMissionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMissionById_args)
        return this.equals((getMissionById_args)that);
      return false;
    }

    public boolean equals(getMissionById_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_missionId = true;
      boolean that_present_missionId = true;
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (this.missionId != that.missionId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_missionId = true;
      list.add(present_missionId);
      if (present_missionId)
        list.add(missionId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMissionById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMissionById_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("missionId:");
      sb.append(this.missionId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMissionById_argsStandardSchemeFactory implements SchemeFactory {
      public getMissionById_argsStandardScheme getScheme() {
        return new getMissionById_argsStandardScheme();
      }
    }

    private static class getMissionById_argsStandardScheme extends StandardScheme<getMissionById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMissionById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.missionId = iprot.readI32();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMissionById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
        oprot.writeI32(struct.missionId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMissionById_argsTupleSchemeFactory implements SchemeFactory {
      public getMissionById_argsTupleScheme getScheme() {
        return new getMissionById_argsTupleScheme();
      }
    }

    private static class getMissionById_argsTupleScheme extends TupleScheme<getMissionById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMissionById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetMissionId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetMissionId()) {
          oprot.writeI32(struct.missionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMissionById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.missionId = iprot.readI32();
          struct.setMissionIdIsSet(true);
        }
      }
    }

  }

  public static class getMissionById_result implements org.apache.thrift.TBase<getMissionById_result, getMissionById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMissionById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMissionById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMissionById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMissionById_resultTupleSchemeFactory());
    }

    public com.afarcloud.thrift.Mission success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Mission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMissionById_result.class, metaDataMap);
    }

    public getMissionById_result() {
    }

    public getMissionById_result(
      com.afarcloud.thrift.Mission success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMissionById_result(getMissionById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.afarcloud.thrift.Mission(other.success);
      }
    }

    public getMissionById_result deepCopy() {
      return new getMissionById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.afarcloud.thrift.Mission getSuccess() {
      return this.success;
    }

    public getMissionById_result setSuccess(com.afarcloud.thrift.Mission success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.afarcloud.thrift.Mission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMissionById_result)
        return this.equals((getMissionById_result)that);
      return false;
    }

    public boolean equals(getMissionById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMissionById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMissionById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMissionById_resultStandardSchemeFactory implements SchemeFactory {
      public getMissionById_resultStandardScheme getScheme() {
        return new getMissionById_resultStandardScheme();
      }
    }

    private static class getMissionById_resultStandardScheme extends StandardScheme<getMissionById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMissionById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.afarcloud.thrift.Mission();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMissionById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMissionById_resultTupleSchemeFactory implements SchemeFactory {
      public getMissionById_resultTupleScheme getScheme() {
        return new getMissionById_resultTupleScheme();
      }
    }

    private static class getMissionById_resultTupleScheme extends TupleScheme<getMissionById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMissionById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMissionById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.afarcloud.thrift.Mission();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVehicle_args implements org.apache.thrift.TBase<getVehicle_args, getVehicle_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVehicle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVehicle_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVehicle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVehicle_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int vid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      VID((short)2, "vid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // VID
            return VID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __VID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVehicle_args.class, metaDataMap);
    }

    public getVehicle_args() {
    }

    public getVehicle_args(
      int requestId,
      int vid)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.vid = vid;
      setVidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVehicle_args(getVehicle_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.vid = other.vid;
    }

    public getVehicle_args deepCopy() {
      return new getVehicle_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setVidIsSet(false);
      this.vid = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public getVehicle_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getVid() {
      return this.vid;
    }

    public getVehicle_args setVid(int vid) {
      this.vid = vid;
      setVidIsSet(true);
      return this;
    }

    public void unsetVid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VID_ISSET_ID);
    }

    /** Returns true if field vid is set (has been assigned a value) and false otherwise */
    public boolean isSetVid() {
      return EncodingUtils.testBit(__isset_bitfield, __VID_ISSET_ID);
    }

    public void setVidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case VID:
        if (value == null) {
          unsetVid();
        } else {
          setVid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case VID:
        return Integer.valueOf(getVid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case VID:
        return isSetVid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVehicle_args)
        return this.equals((getVehicle_args)that);
      return false;
    }

    public boolean equals(getVehicle_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_vid = true;
      boolean that_present_vid = true;
      if (this_present_vid || that_present_vid) {
        if (!(this_present_vid && that_present_vid))
          return false;
        if (this.vid != that.vid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_vid = true;
      list.add(present_vid);
      if (present_vid)
        list.add(vid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVehicle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVid()).compareTo(other.isSetVid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, other.vid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVehicle_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vid:");
      sb.append(this.vid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVehicle_argsStandardSchemeFactory implements SchemeFactory {
      public getVehicle_argsStandardScheme getScheme() {
        return new getVehicle_argsStandardScheme();
      }
    }

    private static class getVehicle_argsStandardScheme extends StandardScheme<getVehicle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVehicle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vid = iprot.readI32();
                struct.setVidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVehicle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeI32(struct.vid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVehicle_argsTupleSchemeFactory implements SchemeFactory {
      public getVehicle_argsTupleScheme getScheme() {
        return new getVehicle_argsTupleScheme();
      }
    }

    private static class getVehicle_argsTupleScheme extends TupleScheme<getVehicle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVehicle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetVid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetVid()) {
          oprot.writeI32(struct.vid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVehicle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vid = iprot.readI32();
          struct.setVidIsSet(true);
        }
      }
    }

  }

  public static class getVehicle_result implements org.apache.thrift.TBase<getVehicle_result, getVehicle_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVehicle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVehicle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVehicle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVehicle_resultTupleSchemeFactory());
    }

    public com.afarcloud.thrift.Vehicle success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Vehicle.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVehicle_result.class, metaDataMap);
    }

    public getVehicle_result() {
    }

    public getVehicle_result(
      com.afarcloud.thrift.Vehicle success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVehicle_result(getVehicle_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.afarcloud.thrift.Vehicle(other.success);
      }
    }

    public getVehicle_result deepCopy() {
      return new getVehicle_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.afarcloud.thrift.Vehicle getSuccess() {
      return this.success;
    }

    public getVehicle_result setSuccess(com.afarcloud.thrift.Vehicle success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.afarcloud.thrift.Vehicle)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVehicle_result)
        return this.equals((getVehicle_result)that);
      return false;
    }

    public boolean equals(getVehicle_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVehicle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVehicle_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVehicle_resultStandardSchemeFactory implements SchemeFactory {
      public getVehicle_resultStandardScheme getScheme() {
        return new getVehicle_resultStandardScheme();
      }
    }

    private static class getVehicle_resultStandardScheme extends StandardScheme<getVehicle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVehicle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.afarcloud.thrift.Vehicle();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVehicle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVehicle_resultTupleSchemeFactory implements SchemeFactory {
      public getVehicle_resultTupleScheme getScheme() {
        return new getVehicle_resultTupleScheme();
      }
    }

    private static class getVehicle_resultTupleScheme extends TupleScheme<getVehicle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVehicle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVehicle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.afarcloud.thrift.Vehicle();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastData_args implements org.apache.thrift.TBase<querySensorLastData_args, querySensorLastData_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastData_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastData_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastData_args.class, metaDataMap);
    }

    public querySensorLastData_args() {
    }

    public querySensorLastData_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastData_args(querySensorLastData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
    }

    public querySensorLastData_args deepCopy() {
      return new querySensorLastData_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorLastData_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public querySensorLastData_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public querySensorLastData_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastData_args)
        return this.equals((querySensorLastData_args)that);
      return false;
    }

    public boolean equals(querySensorLastData_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastData_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastData_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorLastData_argsStandardScheme getScheme() {
        return new querySensorLastData_argsStandardScheme();
      }
    }

    private static class querySensorLastData_argsStandardScheme extends StandardScheme<querySensorLastData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastData_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorLastData_argsTupleScheme getScheme() {
        return new querySensorLastData_argsTupleScheme();
      }
    }

    private static class querySensorLastData_argsTupleScheme extends TupleScheme<querySensorLastData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastData_result implements org.apache.thrift.TBase<querySensorLastData_result, querySensorLastData_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastData_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastData_result.class, metaDataMap);
    }

    public querySensorLastData_result() {
    }

    public querySensorLastData_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastData_result(querySensorLastData_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorLastData_result deepCopy() {
      return new querySensorLastData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorLastData_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastData_result)
        return this.equals((querySensorLastData_result)that);
      return false;
    }

    public boolean equals(querySensorLastData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastData_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorLastData_resultStandardScheme getScheme() {
        return new querySensorLastData_resultStandardScheme();
      }
    }

    private static class querySensorLastData_resultStandardScheme extends StandardScheme<querySensorLastData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list24.size);
                  com.afarcloud.thrift.SensorData _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new com.afarcloud.thrift.SensorData();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastData_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorLastData_resultTupleScheme getScheme() {
        return new querySensorLastData_resultTupleScheme();
      }
    }

    private static class querySensorLastData_resultTupleScheme extends TupleScheme<querySensorLastData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list29.size);
            com.afarcloud.thrift.SensorData _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new com.afarcloud.thrift.SensorData();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataBySensorUid_args implements org.apache.thrift.TBase<querySensorLastDataBySensorUid_args, querySensorLastDataBySensorUid_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataBySensorUid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataBySensorUid_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SENSOR_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorUid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataBySensorUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataBySensorUid_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public String sensorUid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      SENSOR_UID((short)2, "sensorUid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // SENSOR_UID
            return SENSOR_UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SENSOR_UID, new org.apache.thrift.meta_data.FieldMetaData("sensorUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataBySensorUid_args.class, metaDataMap);
    }

    public querySensorLastDataBySensorUid_args() {
    }

    public querySensorLastDataBySensorUid_args(
      int requestId,
      String sensorUid)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.sensorUid = sensorUid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataBySensorUid_args(querySensorLastDataBySensorUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetSensorUid()) {
        this.sensorUid = other.sensorUid;
      }
    }

    public querySensorLastDataBySensorUid_args deepCopy() {
      return new querySensorLastDataBySensorUid_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.sensorUid = null;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorLastDataBySensorUid_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public String getSensorUid() {
      return this.sensorUid;
    }

    public querySensorLastDataBySensorUid_args setSensorUid(String sensorUid) {
      this.sensorUid = sensorUid;
      return this;
    }

    public void unsetSensorUid() {
      this.sensorUid = null;
    }

    /** Returns true if field sensorUid is set (has been assigned a value) and false otherwise */
    public boolean isSetSensorUid() {
      return this.sensorUid != null;
    }

    public void setSensorUidIsSet(boolean value) {
      if (!value) {
        this.sensorUid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case SENSOR_UID:
        if (value == null) {
          unsetSensorUid();
        } else {
          setSensorUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case SENSOR_UID:
        return getSensorUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case SENSOR_UID:
        return isSetSensorUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataBySensorUid_args)
        return this.equals((querySensorLastDataBySensorUid_args)that);
      return false;
    }

    public boolean equals(querySensorLastDataBySensorUid_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_sensorUid = true && this.isSetSensorUid();
      boolean that_present_sensorUid = true && that.isSetSensorUid();
      if (this_present_sensorUid || that_present_sensorUid) {
        if (!(this_present_sensorUid && that_present_sensorUid))
          return false;
        if (!this.sensorUid.equals(that.sensorUid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_sensorUid = true && (isSetSensorUid());
      list.add(present_sensorUid);
      if (present_sensorUid)
        list.add(sensorUid);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataBySensorUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSensorUid()).compareTo(other.isSetSensorUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSensorUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorUid, other.sensorUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataBySensorUid_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sensorUid:");
      if (this.sensorUid == null) {
        sb.append("null");
      } else {
        sb.append(this.sensorUid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataBySensorUid_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorUid_argsStandardScheme getScheme() {
        return new querySensorLastDataBySensorUid_argsStandardScheme();
      }
    }

    private static class querySensorLastDataBySensorUid_argsStandardScheme extends StandardScheme<querySensorLastDataBySensorUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataBySensorUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SENSOR_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sensorUid = iprot.readString();
                struct.setSensorUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataBySensorUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.sensorUid != null) {
          oprot.writeFieldBegin(SENSOR_UID_FIELD_DESC);
          oprot.writeString(struct.sensorUid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataBySensorUid_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorUid_argsTupleScheme getScheme() {
        return new querySensorLastDataBySensorUid_argsTupleScheme();
      }
    }

    private static class querySensorLastDataBySensorUid_argsTupleScheme extends TupleScheme<querySensorLastDataBySensorUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetSensorUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetSensorUid()) {
          oprot.writeString(struct.sensorUid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sensorUid = iprot.readString();
          struct.setSensorUidIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataBySensorUid_result implements org.apache.thrift.TBase<querySensorLastDataBySensorUid_result, querySensorLastDataBySensorUid_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataBySensorUid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataBySensorUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataBySensorUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataBySensorUid_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataBySensorUid_result.class, metaDataMap);
    }

    public querySensorLastDataBySensorUid_result() {
    }

    public querySensorLastDataBySensorUid_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataBySensorUid_result(querySensorLastDataBySensorUid_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorLastDataBySensorUid_result deepCopy() {
      return new querySensorLastDataBySensorUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorLastDataBySensorUid_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataBySensorUid_result)
        return this.equals((querySensorLastDataBySensorUid_result)that);
      return false;
    }

    public boolean equals(querySensorLastDataBySensorUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataBySensorUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataBySensorUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataBySensorUid_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorUid_resultStandardScheme getScheme() {
        return new querySensorLastDataBySensorUid_resultStandardScheme();
      }
    }

    private static class querySensorLastDataBySensorUid_resultStandardScheme extends StandardScheme<querySensorLastDataBySensorUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataBySensorUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list32.size);
                  com.afarcloud.thrift.SensorData _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new com.afarcloud.thrift.SensorData();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataBySensorUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataBySensorUid_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorUid_resultTupleScheme getScheme() {
        return new querySensorLastDataBySensorUid_resultTupleScheme();
      }
    }

    private static class querySensorLastDataBySensorUid_resultTupleScheme extends TupleScheme<querySensorLastDataBySensorUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list37.size);
            com.afarcloud.thrift.SensorData _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new com.afarcloud.thrift.SensorData();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataBySensorType_args implements org.apache.thrift.TBase<querySensorLastDataBySensorType_args, querySensorLastDataBySensorType_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataBySensorType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataBySensorType_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SENSOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorType", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataBySensorType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataBySensorType_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required
    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public com.afarcloud.thrift.SensorType sensorType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius"),
      /**
       * 
       * @see com.afarcloud.thrift.SensorType
       */
      SENSOR_TYPE((short)4, "sensorType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          case 4: // SENSOR_TYPE
            return SENSOR_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SENSOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sensorType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.afarcloud.thrift.SensorType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataBySensorType_args.class, metaDataMap);
    }

    public querySensorLastDataBySensorType_args() {
    }

    public querySensorLastDataBySensorType_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius,
      com.afarcloud.thrift.SensorType sensorType)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
      this.sensorType = sensorType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataBySensorType_args(querySensorLastDataBySensorType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
      if (other.isSetSensorType()) {
        this.sensorType = other.sensorType;
      }
    }

    public querySensorLastDataBySensorType_args deepCopy() {
      return new querySensorLastDataBySensorType_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
      this.sensorType = null;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorLastDataBySensorType_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public querySensorLastDataBySensorType_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public querySensorLastDataBySensorType_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public com.afarcloud.thrift.SensorType getSensorType() {
      return this.sensorType;
    }

    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public querySensorLastDataBySensorType_args setSensorType(com.afarcloud.thrift.SensorType sensorType) {
      this.sensorType = sensorType;
      return this;
    }

    public void unsetSensorType() {
      this.sensorType = null;
    }

    /** Returns true if field sensorType is set (has been assigned a value) and false otherwise */
    public boolean isSetSensorType() {
      return this.sensorType != null;
    }

    public void setSensorTypeIsSet(boolean value) {
      if (!value) {
        this.sensorType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      case SENSOR_TYPE:
        if (value == null) {
          unsetSensorType();
        } else {
          setSensorType((com.afarcloud.thrift.SensorType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      case SENSOR_TYPE:
        return getSensorType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      case SENSOR_TYPE:
        return isSetSensorType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataBySensorType_args)
        return this.equals((querySensorLastDataBySensorType_args)that);
      return false;
    }

    public boolean equals(querySensorLastDataBySensorType_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      boolean this_present_sensorType = true && this.isSetSensorType();
      boolean that_present_sensorType = true && that.isSetSensorType();
      if (this_present_sensorType || that_present_sensorType) {
        if (!(this_present_sensorType && that_present_sensorType))
          return false;
        if (!this.sensorType.equals(that.sensorType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      boolean present_sensorType = true && (isSetSensorType());
      list.add(present_sensorType);
      if (present_sensorType)
        list.add(sensorType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataBySensorType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSensorType()).compareTo(other.isSetSensorType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSensorType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorType, other.sensorType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataBySensorType_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sensorType:");
      if (this.sensorType == null) {
        sb.append("null");
      } else {
        sb.append(this.sensorType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataBySensorType_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorType_argsStandardScheme getScheme() {
        return new querySensorLastDataBySensorType_argsStandardScheme();
      }
    }

    private static class querySensorLastDataBySensorType_argsStandardScheme extends StandardScheme<querySensorLastDataBySensorType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataBySensorType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SENSOR_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
                struct.setSensorTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataBySensorType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        if (struct.sensorType != null) {
          oprot.writeFieldBegin(SENSOR_TYPE_FIELD_DESC);
          oprot.writeI32(struct.sensorType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataBySensorType_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorType_argsTupleScheme getScheme() {
        return new querySensorLastDataBySensorType_argsTupleScheme();
      }
    }

    private static class querySensorLastDataBySensorType_argsTupleScheme extends TupleScheme<querySensorLastDataBySensorType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        if (struct.isSetSensorType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
        if (struct.isSetSensorType()) {
          oprot.writeI32(struct.sensorType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
          struct.setSensorTypeIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataBySensorType_result implements org.apache.thrift.TBase<querySensorLastDataBySensorType_result, querySensorLastDataBySensorType_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataBySensorType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataBySensorType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataBySensorType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataBySensorType_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataBySensorType_result.class, metaDataMap);
    }

    public querySensorLastDataBySensorType_result() {
    }

    public querySensorLastDataBySensorType_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataBySensorType_result(querySensorLastDataBySensorType_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorLastDataBySensorType_result deepCopy() {
      return new querySensorLastDataBySensorType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorLastDataBySensorType_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataBySensorType_result)
        return this.equals((querySensorLastDataBySensorType_result)that);
      return false;
    }

    public boolean equals(querySensorLastDataBySensorType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataBySensorType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataBySensorType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataBySensorType_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorType_resultStandardScheme getScheme() {
        return new querySensorLastDataBySensorType_resultStandardScheme();
      }
    }

    private static class querySensorLastDataBySensorType_resultStandardScheme extends StandardScheme<querySensorLastDataBySensorType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataBySensorType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list40.size);
                  com.afarcloud.thrift.SensorData _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new com.afarcloud.thrift.SensorData();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataBySensorType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataBySensorType_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorType_resultTupleScheme getScheme() {
        return new querySensorLastDataBySensorType_resultTupleScheme();
      }
    }

    private static class querySensorLastDataBySensorType_resultTupleScheme extends TupleScheme<querySensorLastDataBySensorType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list45.size);
            com.afarcloud.thrift.SensorData _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new com.afarcloud.thrift.SensorData();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataByObservationType_args implements org.apache.thrift.TBase<querySensorLastDataByObservationType_args, querySensorLastDataByObservationType_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataByObservationType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataByObservationType_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField OBSER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("obserType", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataByObservationType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataByObservationType_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required
    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public com.afarcloud.thrift.ObservationType obserType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius"),
      /**
       * 
       * @see com.afarcloud.thrift.ObservationType
       */
      OBSER_TYPE((short)4, "obserType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          case 4: // OBSER_TYPE
            return OBSER_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OBSER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("obserType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.afarcloud.thrift.ObservationType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataByObservationType_args.class, metaDataMap);
    }

    public querySensorLastDataByObservationType_args() {
    }

    public querySensorLastDataByObservationType_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius,
      com.afarcloud.thrift.ObservationType obserType)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
      this.obserType = obserType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataByObservationType_args(querySensorLastDataByObservationType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
      if (other.isSetObserType()) {
        this.obserType = other.obserType;
      }
    }

    public querySensorLastDataByObservationType_args deepCopy() {
      return new querySensorLastDataByObservationType_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
      this.obserType = null;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorLastDataByObservationType_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public querySensorLastDataByObservationType_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public querySensorLastDataByObservationType_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public com.afarcloud.thrift.ObservationType getObserType() {
      return this.obserType;
    }

    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public querySensorLastDataByObservationType_args setObserType(com.afarcloud.thrift.ObservationType obserType) {
      this.obserType = obserType;
      return this;
    }

    public void unsetObserType() {
      this.obserType = null;
    }

    /** Returns true if field obserType is set (has been assigned a value) and false otherwise */
    public boolean isSetObserType() {
      return this.obserType != null;
    }

    public void setObserTypeIsSet(boolean value) {
      if (!value) {
        this.obserType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      case OBSER_TYPE:
        if (value == null) {
          unsetObserType();
        } else {
          setObserType((com.afarcloud.thrift.ObservationType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      case OBSER_TYPE:
        return getObserType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      case OBSER_TYPE:
        return isSetObserType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataByObservationType_args)
        return this.equals((querySensorLastDataByObservationType_args)that);
      return false;
    }

    public boolean equals(querySensorLastDataByObservationType_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      boolean this_present_obserType = true && this.isSetObserType();
      boolean that_present_obserType = true && that.isSetObserType();
      if (this_present_obserType || that_present_obserType) {
        if (!(this_present_obserType && that_present_obserType))
          return false;
        if (!this.obserType.equals(that.obserType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      boolean present_obserType = true && (isSetObserType());
      list.add(present_obserType);
      if (present_obserType)
        list.add(obserType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataByObservationType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetObserType()).compareTo(other.isSetObserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obserType, other.obserType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataByObservationType_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      if (!first) sb.append(", ");
      sb.append("obserType:");
      if (this.obserType == null) {
        sb.append("null");
      } else {
        sb.append(this.obserType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataByObservationType_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataByObservationType_argsStandardScheme getScheme() {
        return new querySensorLastDataByObservationType_argsStandardScheme();
      }
    }

    private static class querySensorLastDataByObservationType_argsStandardScheme extends StandardScheme<querySensorLastDataByObservationType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataByObservationType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OBSER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.obserType = com.afarcloud.thrift.ObservationType.findByValue(iprot.readI32());
                struct.setObserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataByObservationType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        if (struct.obserType != null) {
          oprot.writeFieldBegin(OBSER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.obserType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataByObservationType_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataByObservationType_argsTupleScheme getScheme() {
        return new querySensorLastDataByObservationType_argsTupleScheme();
      }
    }

    private static class querySensorLastDataByObservationType_argsTupleScheme extends TupleScheme<querySensorLastDataByObservationType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataByObservationType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        if (struct.isSetObserType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
        if (struct.isSetObserType()) {
          oprot.writeI32(struct.obserType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataByObservationType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.obserType = com.afarcloud.thrift.ObservationType.findByValue(iprot.readI32());
          struct.setObserTypeIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataByObservationType_result implements org.apache.thrift.TBase<querySensorLastDataByObservationType_result, querySensorLastDataByObservationType_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataByObservationType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataByObservationType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataByObservationType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataByObservationType_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataByObservationType_result.class, metaDataMap);
    }

    public querySensorLastDataByObservationType_result() {
    }

    public querySensorLastDataByObservationType_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataByObservationType_result(querySensorLastDataByObservationType_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorLastDataByObservationType_result deepCopy() {
      return new querySensorLastDataByObservationType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorLastDataByObservationType_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataByObservationType_result)
        return this.equals((querySensorLastDataByObservationType_result)that);
      return false;
    }

    public boolean equals(querySensorLastDataByObservationType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataByObservationType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataByObservationType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataByObservationType_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataByObservationType_resultStandardScheme getScheme() {
        return new querySensorLastDataByObservationType_resultStandardScheme();
      }
    }

    private static class querySensorLastDataByObservationType_resultStandardScheme extends StandardScheme<querySensorLastDataByObservationType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataByObservationType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list48.size);
                  com.afarcloud.thrift.SensorData _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new com.afarcloud.thrift.SensorData();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataByObservationType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataByObservationType_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataByObservationType_resultTupleScheme getScheme() {
        return new querySensorLastDataByObservationType_resultTupleScheme();
      }
    }

    private static class querySensorLastDataByObservationType_resultTupleScheme extends TupleScheme<querySensorLastDataByObservationType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataByObservationType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataByObservationType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list53.size);
            com.afarcloud.thrift.SensorData _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new com.afarcloud.thrift.SensorData();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCollarLastData_args implements org.apache.thrift.TBase<queryCollarLastData_args, queryCollarLastData_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarLastData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarLastData_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarLastData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarLastData_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarLastData_args.class, metaDataMap);
    }

    public queryCollarLastData_args() {
    }

    public queryCollarLastData_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarLastData_args(queryCollarLastData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
    }

    public queryCollarLastData_args deepCopy() {
      return new queryCollarLastData_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryCollarLastData_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public queryCollarLastData_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public queryCollarLastData_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarLastData_args)
        return this.equals((queryCollarLastData_args)that);
      return false;
    }

    public boolean equals(queryCollarLastData_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarLastData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarLastData_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarLastData_argsStandardSchemeFactory implements SchemeFactory {
      public queryCollarLastData_argsStandardScheme getScheme() {
        return new queryCollarLastData_argsStandardScheme();
      }
    }

    private static class queryCollarLastData_argsStandardScheme extends StandardScheme<queryCollarLastData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarLastData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarLastData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarLastData_argsTupleSchemeFactory implements SchemeFactory {
      public queryCollarLastData_argsTupleScheme getScheme() {
        return new queryCollarLastData_argsTupleScheme();
      }
    }

    private static class queryCollarLastData_argsTupleScheme extends TupleScheme<queryCollarLastData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarLastData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarLastData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
      }
    }

  }

  public static class queryCollarLastData_result implements org.apache.thrift.TBase<queryCollarLastData_result, queryCollarLastData_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarLastData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarLastData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarLastData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarLastData_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.CollarData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.CollarData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarLastData_result.class, metaDataMap);
    }

    public queryCollarLastData_result() {
    }

    public queryCollarLastData_result(
      List<com.afarcloud.thrift.CollarData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarLastData_result(queryCollarLastData_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.CollarData> __this__success = new ArrayList<com.afarcloud.thrift.CollarData>(other.success.size());
        for (com.afarcloud.thrift.CollarData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.CollarData(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCollarLastData_result deepCopy() {
      return new queryCollarLastData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.CollarData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.CollarData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.CollarData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.CollarData> getSuccess() {
      return this.success;
    }

    public queryCollarLastData_result setSuccess(List<com.afarcloud.thrift.CollarData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.CollarData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarLastData_result)
        return this.equals((queryCollarLastData_result)that);
      return false;
    }

    public boolean equals(queryCollarLastData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarLastData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarLastData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarLastData_resultStandardSchemeFactory implements SchemeFactory {
      public queryCollarLastData_resultStandardScheme getScheme() {
        return new queryCollarLastData_resultStandardScheme();
      }
    }

    private static class queryCollarLastData_resultStandardScheme extends StandardScheme<queryCollarLastData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarLastData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list56.size);
                  com.afarcloud.thrift.CollarData _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new com.afarcloud.thrift.CollarData();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarLastData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.CollarData _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarLastData_resultTupleSchemeFactory implements SchemeFactory {
      public queryCollarLastData_resultTupleScheme getScheme() {
        return new queryCollarLastData_resultTupleScheme();
      }
    }

    private static class queryCollarLastData_resultTupleScheme extends TupleScheme<queryCollarLastData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarLastData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.CollarData _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarLastData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list61.size);
            com.afarcloud.thrift.CollarData _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new com.afarcloud.thrift.CollarData();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCollarLastDataByCollarUid_args implements org.apache.thrift.TBase<queryCollarLastDataByCollarUid_args, queryCollarLastDataByCollarUid_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarLastDataByCollarUid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarLastDataByCollarUid_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COLLAR_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("collarUid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarLastDataByCollarUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarLastDataByCollarUid_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public String collarUid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      COLLAR_UID((short)2, "collarUid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // COLLAR_UID
            return COLLAR_UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COLLAR_UID, new org.apache.thrift.meta_data.FieldMetaData("collarUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarLastDataByCollarUid_args.class, metaDataMap);
    }

    public queryCollarLastDataByCollarUid_args() {
    }

    public queryCollarLastDataByCollarUid_args(
      int requestId,
      String collarUid)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.collarUid = collarUid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarLastDataByCollarUid_args(queryCollarLastDataByCollarUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetCollarUid()) {
        this.collarUid = other.collarUid;
      }
    }

    public queryCollarLastDataByCollarUid_args deepCopy() {
      return new queryCollarLastDataByCollarUid_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.collarUid = null;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryCollarLastDataByCollarUid_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public String getCollarUid() {
      return this.collarUid;
    }

    public queryCollarLastDataByCollarUid_args setCollarUid(String collarUid) {
      this.collarUid = collarUid;
      return this;
    }

    public void unsetCollarUid() {
      this.collarUid = null;
    }

    /** Returns true if field collarUid is set (has been assigned a value) and false otherwise */
    public boolean isSetCollarUid() {
      return this.collarUid != null;
    }

    public void setCollarUidIsSet(boolean value) {
      if (!value) {
        this.collarUid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case COLLAR_UID:
        if (value == null) {
          unsetCollarUid();
        } else {
          setCollarUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case COLLAR_UID:
        return getCollarUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case COLLAR_UID:
        return isSetCollarUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarLastDataByCollarUid_args)
        return this.equals((queryCollarLastDataByCollarUid_args)that);
      return false;
    }

    public boolean equals(queryCollarLastDataByCollarUid_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_collarUid = true && this.isSetCollarUid();
      boolean that_present_collarUid = true && that.isSetCollarUid();
      if (this_present_collarUid || that_present_collarUid) {
        if (!(this_present_collarUid && that_present_collarUid))
          return false;
        if (!this.collarUid.equals(that.collarUid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_collarUid = true && (isSetCollarUid());
      list.add(present_collarUid);
      if (present_collarUid)
        list.add(collarUid);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarLastDataByCollarUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCollarUid()).compareTo(other.isSetCollarUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollarUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collarUid, other.collarUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarLastDataByCollarUid_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("collarUid:");
      if (this.collarUid == null) {
        sb.append("null");
      } else {
        sb.append(this.collarUid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarLastDataByCollarUid_argsStandardSchemeFactory implements SchemeFactory {
      public queryCollarLastDataByCollarUid_argsStandardScheme getScheme() {
        return new queryCollarLastDataByCollarUid_argsStandardScheme();
      }
    }

    private static class queryCollarLastDataByCollarUid_argsStandardScheme extends StandardScheme<queryCollarLastDataByCollarUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarLastDataByCollarUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLLAR_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collarUid = iprot.readString();
                struct.setCollarUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarLastDataByCollarUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.collarUid != null) {
          oprot.writeFieldBegin(COLLAR_UID_FIELD_DESC);
          oprot.writeString(struct.collarUid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarLastDataByCollarUid_argsTupleSchemeFactory implements SchemeFactory {
      public queryCollarLastDataByCollarUid_argsTupleScheme getScheme() {
        return new queryCollarLastDataByCollarUid_argsTupleScheme();
      }
    }

    private static class queryCollarLastDataByCollarUid_argsTupleScheme extends TupleScheme<queryCollarLastDataByCollarUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarLastDataByCollarUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetCollarUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetCollarUid()) {
          oprot.writeString(struct.collarUid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarLastDataByCollarUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.collarUid = iprot.readString();
          struct.setCollarUidIsSet(true);
        }
      }
    }

  }

  public static class queryCollarLastDataByCollarUid_result implements org.apache.thrift.TBase<queryCollarLastDataByCollarUid_result, queryCollarLastDataByCollarUid_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarLastDataByCollarUid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarLastDataByCollarUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarLastDataByCollarUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarLastDataByCollarUid_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.CollarData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.CollarData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarLastDataByCollarUid_result.class, metaDataMap);
    }

    public queryCollarLastDataByCollarUid_result() {
    }

    public queryCollarLastDataByCollarUid_result(
      List<com.afarcloud.thrift.CollarData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarLastDataByCollarUid_result(queryCollarLastDataByCollarUid_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.CollarData> __this__success = new ArrayList<com.afarcloud.thrift.CollarData>(other.success.size());
        for (com.afarcloud.thrift.CollarData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.CollarData(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCollarLastDataByCollarUid_result deepCopy() {
      return new queryCollarLastDataByCollarUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.CollarData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.CollarData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.CollarData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.CollarData> getSuccess() {
      return this.success;
    }

    public queryCollarLastDataByCollarUid_result setSuccess(List<com.afarcloud.thrift.CollarData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.CollarData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarLastDataByCollarUid_result)
        return this.equals((queryCollarLastDataByCollarUid_result)that);
      return false;
    }

    public boolean equals(queryCollarLastDataByCollarUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarLastDataByCollarUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarLastDataByCollarUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarLastDataByCollarUid_resultStandardSchemeFactory implements SchemeFactory {
      public queryCollarLastDataByCollarUid_resultStandardScheme getScheme() {
        return new queryCollarLastDataByCollarUid_resultStandardScheme();
      }
    }

    private static class queryCollarLastDataByCollarUid_resultStandardScheme extends StandardScheme<queryCollarLastDataByCollarUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarLastDataByCollarUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list64.size);
                  com.afarcloud.thrift.CollarData _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = new com.afarcloud.thrift.CollarData();
                    _elem65.read(iprot);
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarLastDataByCollarUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.CollarData _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarLastDataByCollarUid_resultTupleSchemeFactory implements SchemeFactory {
      public queryCollarLastDataByCollarUid_resultTupleScheme getScheme() {
        return new queryCollarLastDataByCollarUid_resultTupleScheme();
      }
    }

    private static class queryCollarLastDataByCollarUid_resultTupleScheme extends TupleScheme<queryCollarLastDataByCollarUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarLastDataByCollarUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.CollarData _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarLastDataByCollarUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list69.size);
            com.afarcloud.thrift.CollarData _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = new com.afarcloud.thrift.CollarData();
              _elem70.read(iprot);
              struct.success.add(_elem70);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleLastStateVector_args implements org.apache.thrift.TBase<queryVehicleLastStateVector_args, queryVehicleLastStateVector_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleLastStateVector_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleLastStateVector_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleLastStateVector_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleLastStateVector_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleLastStateVector_args.class, metaDataMap);
    }

    public queryVehicleLastStateVector_args() {
    }

    public queryVehicleLastStateVector_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleLastStateVector_args(queryVehicleLastStateVector_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
    }

    public queryVehicleLastStateVector_args deepCopy() {
      return new queryVehicleLastStateVector_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryVehicleLastStateVector_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public queryVehicleLastStateVector_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public queryVehicleLastStateVector_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleLastStateVector_args)
        return this.equals((queryVehicleLastStateVector_args)that);
      return false;
    }

    public boolean equals(queryVehicleLastStateVector_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleLastStateVector_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleLastStateVector_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleLastStateVector_argsStandardSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVector_argsStandardScheme getScheme() {
        return new queryVehicleLastStateVector_argsStandardScheme();
      }
    }

    private static class queryVehicleLastStateVector_argsStandardScheme extends StandardScheme<queryVehicleLastStateVector_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleLastStateVector_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleLastStateVector_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleLastStateVector_argsTupleSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVector_argsTupleScheme getScheme() {
        return new queryVehicleLastStateVector_argsTupleScheme();
      }
    }

    private static class queryVehicleLastStateVector_argsTupleScheme extends TupleScheme<queryVehicleLastStateVector_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVector_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVector_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleLastStateVector_result implements org.apache.thrift.TBase<queryVehicleLastStateVector_result, queryVehicleLastStateVector_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleLastStateVector_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleLastStateVector_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleLastStateVector_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleLastStateVector_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.StateVector> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.StateVector.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleLastStateVector_result.class, metaDataMap);
    }

    public queryVehicleLastStateVector_result() {
    }

    public queryVehicleLastStateVector_result(
      List<com.afarcloud.thrift.StateVector> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleLastStateVector_result(queryVehicleLastStateVector_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.StateVector> __this__success = new ArrayList<com.afarcloud.thrift.StateVector>(other.success.size());
        for (com.afarcloud.thrift.StateVector other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.StateVector(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryVehicleLastStateVector_result deepCopy() {
      return new queryVehicleLastStateVector_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.StateVector> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.StateVector elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.StateVector>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.StateVector> getSuccess() {
      return this.success;
    }

    public queryVehicleLastStateVector_result setSuccess(List<com.afarcloud.thrift.StateVector> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.StateVector>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleLastStateVector_result)
        return this.equals((queryVehicleLastStateVector_result)that);
      return false;
    }

    public boolean equals(queryVehicleLastStateVector_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleLastStateVector_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleLastStateVector_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleLastStateVector_resultStandardSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVector_resultStandardScheme getScheme() {
        return new queryVehicleLastStateVector_resultStandardScheme();
      }
    }

    private static class queryVehicleLastStateVector_resultStandardScheme extends StandardScheme<queryVehicleLastStateVector_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleLastStateVector_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list72.size);
                  com.afarcloud.thrift.StateVector _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = new com.afarcloud.thrift.StateVector();
                    _elem73.read(iprot);
                    struct.success.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleLastStateVector_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.StateVector _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleLastStateVector_resultTupleSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVector_resultTupleScheme getScheme() {
        return new queryVehicleLastStateVector_resultTupleScheme();
      }
    }

    private static class queryVehicleLastStateVector_resultTupleScheme extends TupleScheme<queryVehicleLastStateVector_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVector_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.StateVector _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVector_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list77.size);
            com.afarcloud.thrift.StateVector _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = new com.afarcloud.thrift.StateVector();
              _elem78.read(iprot);
              struct.success.add(_elem78);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleLastStateVectorByVehicleId_args implements org.apache.thrift.TBase<queryVehicleLastStateVectorByVehicleId_args, queryVehicleLastStateVectorByVehicleId_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleLastStateVectorByVehicleId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleLastStateVectorByVehicleId_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VEHICLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicleId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleLastStateVectorByVehicleId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleLastStateVectorByVehicleId_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int vehicleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      VEHICLE_ID((short)2, "vehicleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // VEHICLE_ID
            return VEHICLE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __VEHICLEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VEHICLE_ID, new org.apache.thrift.meta_data.FieldMetaData("vehicleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleLastStateVectorByVehicleId_args.class, metaDataMap);
    }

    public queryVehicleLastStateVectorByVehicleId_args() {
    }

    public queryVehicleLastStateVectorByVehicleId_args(
      int requestId,
      int vehicleId)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleLastStateVectorByVehicleId_args(queryVehicleLastStateVectorByVehicleId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.vehicleId = other.vehicleId;
    }

    public queryVehicleLastStateVectorByVehicleId_args deepCopy() {
      return new queryVehicleLastStateVectorByVehicleId_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setVehicleIdIsSet(false);
      this.vehicleId = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryVehicleLastStateVectorByVehicleId_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getVehicleId() {
      return this.vehicleId;
    }

    public queryVehicleLastStateVectorByVehicleId_args setVehicleId(int vehicleId) {
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
      return this;
    }

    public void unsetVehicleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    /** Returns true if field vehicleId is set (has been assigned a value) and false otherwise */
    public boolean isSetVehicleId() {
      return EncodingUtils.testBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    public void setVehicleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEHICLEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case VEHICLE_ID:
        if (value == null) {
          unsetVehicleId();
        } else {
          setVehicleId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case VEHICLE_ID:
        return Integer.valueOf(getVehicleId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case VEHICLE_ID:
        return isSetVehicleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleLastStateVectorByVehicleId_args)
        return this.equals((queryVehicleLastStateVectorByVehicleId_args)that);
      return false;
    }

    public boolean equals(queryVehicleLastStateVectorByVehicleId_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_vehicleId = true;
      boolean that_present_vehicleId = true;
      if (this_present_vehicleId || that_present_vehicleId) {
        if (!(this_present_vehicleId && that_present_vehicleId))
          return false;
        if (this.vehicleId != that.vehicleId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_vehicleId = true;
      list.add(present_vehicleId);
      if (present_vehicleId)
        list.add(vehicleId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleLastStateVectorByVehicleId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVehicleId()).compareTo(other.isSetVehicleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVehicleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicleId, other.vehicleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleLastStateVectorByVehicleId_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vehicleId:");
      sb.append(this.vehicleId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleLastStateVectorByVehicleId_argsStandardSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVectorByVehicleId_argsStandardScheme getScheme() {
        return new queryVehicleLastStateVectorByVehicleId_argsStandardScheme();
      }
    }

    private static class queryVehicleLastStateVectorByVehicleId_argsStandardScheme extends StandardScheme<queryVehicleLastStateVectorByVehicleId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleLastStateVectorByVehicleId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VEHICLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vehicleId = iprot.readI32();
                struct.setVehicleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleLastStateVectorByVehicleId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VEHICLE_ID_FIELD_DESC);
        oprot.writeI32(struct.vehicleId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleLastStateVectorByVehicleId_argsTupleSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVectorByVehicleId_argsTupleScheme getScheme() {
        return new queryVehicleLastStateVectorByVehicleId_argsTupleScheme();
      }
    }

    private static class queryVehicleLastStateVectorByVehicleId_argsTupleScheme extends TupleScheme<queryVehicleLastStateVectorByVehicleId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVectorByVehicleId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetVehicleId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetVehicleId()) {
          oprot.writeI32(struct.vehicleId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVectorByVehicleId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vehicleId = iprot.readI32();
          struct.setVehicleIdIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleLastStateVectorByVehicleId_result implements org.apache.thrift.TBase<queryVehicleLastStateVectorByVehicleId_result, queryVehicleLastStateVectorByVehicleId_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleLastStateVectorByVehicleId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleLastStateVectorByVehicleId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleLastStateVectorByVehicleId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleLastStateVectorByVehicleId_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.StateVector> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.StateVector.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleLastStateVectorByVehicleId_result.class, metaDataMap);
    }

    public queryVehicleLastStateVectorByVehicleId_result() {
    }

    public queryVehicleLastStateVectorByVehicleId_result(
      List<com.afarcloud.thrift.StateVector> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleLastStateVectorByVehicleId_result(queryVehicleLastStateVectorByVehicleId_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.StateVector> __this__success = new ArrayList<com.afarcloud.thrift.StateVector>(other.success.size());
        for (com.afarcloud.thrift.StateVector other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.StateVector(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryVehicleLastStateVectorByVehicleId_result deepCopy() {
      return new queryVehicleLastStateVectorByVehicleId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.StateVector> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.StateVector elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.StateVector>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.StateVector> getSuccess() {
      return this.success;
    }

    public queryVehicleLastStateVectorByVehicleId_result setSuccess(List<com.afarcloud.thrift.StateVector> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.StateVector>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleLastStateVectorByVehicleId_result)
        return this.equals((queryVehicleLastStateVectorByVehicleId_result)that);
      return false;
    }

    public boolean equals(queryVehicleLastStateVectorByVehicleId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleLastStateVectorByVehicleId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleLastStateVectorByVehicleId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleLastStateVectorByVehicleId_resultStandardSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVectorByVehicleId_resultStandardScheme getScheme() {
        return new queryVehicleLastStateVectorByVehicleId_resultStandardScheme();
      }
    }

    private static class queryVehicleLastStateVectorByVehicleId_resultStandardScheme extends StandardScheme<queryVehicleLastStateVectorByVehicleId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleLastStateVectorByVehicleId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list80.size);
                  com.afarcloud.thrift.StateVector _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = new com.afarcloud.thrift.StateVector();
                    _elem81.read(iprot);
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleLastStateVectorByVehicleId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.StateVector _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleLastStateVectorByVehicleId_resultTupleSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVectorByVehicleId_resultTupleScheme getScheme() {
        return new queryVehicleLastStateVectorByVehicleId_resultTupleScheme();
      }
    }

    private static class queryVehicleLastStateVectorByVehicleId_resultTupleScheme extends TupleScheme<queryVehicleLastStateVectorByVehicleId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVectorByVehicleId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.StateVector _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVectorByVehicleId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list85.size);
            com.afarcloud.thrift.StateVector _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = new com.afarcloud.thrift.StateVector();
              _elem86.read(iprot);
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalData_args implements org.apache.thrift.TBase<querySensorHistoricalData_args, querySensorHistoricalData_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalData_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalData_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius"),
      START_TIME((short)4, "startTime"),
      END_TIME((short)5, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          case 4: // START_TIME
            return START_TIME;
          case 5: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalData_args.class, metaDataMap);
    }

    public querySensorHistoricalData_args() {
    }

    public querySensorHistoricalData_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalData_args(querySensorHistoricalData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public querySensorHistoricalData_args deepCopy() {
      return new querySensorHistoricalData_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorHistoricalData_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public querySensorHistoricalData_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public querySensorHistoricalData_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.startTime;
    }

    public querySensorHistoricalData_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public querySensorHistoricalData_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalData_args)
        return this.equals((querySensorHistoricalData_args)that);
      return false;
    }

    public boolean equals(querySensorHistoricalData_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalData_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalData_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalData_argsStandardScheme getScheme() {
        return new querySensorHistoricalData_argsStandardScheme();
      }
    }

    private static class querySensorHistoricalData_argsStandardScheme extends StandardScheme<querySensorHistoricalData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalData_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalData_argsTupleScheme getScheme() {
        return new querySensorHistoricalData_argsTupleScheme();
      }
    }

    private static class querySensorHistoricalData_argsTupleScheme extends TupleScheme<querySensorHistoricalData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        if (struct.isSetStartTime()) {
          optionals.set(3);
        }
        if (struct.isSetEndTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalData_result implements org.apache.thrift.TBase<querySensorHistoricalData_result, querySensorHistoricalData_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalData_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalData_result.class, metaDataMap);
    }

    public querySensorHistoricalData_result() {
    }

    public querySensorHistoricalData_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalData_result(querySensorHistoricalData_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorHistoricalData_result deepCopy() {
      return new querySensorHistoricalData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorHistoricalData_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalData_result)
        return this.equals((querySensorHistoricalData_result)that);
      return false;
    }

    public boolean equals(querySensorHistoricalData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalData_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalData_resultStandardScheme getScheme() {
        return new querySensorHistoricalData_resultStandardScheme();
      }
    }

    private static class querySensorHistoricalData_resultStandardScheme extends StandardScheme<querySensorHistoricalData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list88.size);
                  com.afarcloud.thrift.SensorData _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = new com.afarcloud.thrift.SensorData();
                    _elem89.read(iprot);
                    struct.success.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalData_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalData_resultTupleScheme getScheme() {
        return new querySensorHistoricalData_resultTupleScheme();
      }
    }

    private static class querySensorHistoricalData_resultTupleScheme extends TupleScheme<querySensorHistoricalData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list93.size);
            com.afarcloud.thrift.SensorData _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = new com.afarcloud.thrift.SensorData();
              _elem94.read(iprot);
              struct.success.add(_elem94);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataBySensorUid_args implements org.apache.thrift.TBase<querySensorHistoricalDataBySensorUid_args, querySensorHistoricalDataBySensorUid_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataBySensorUid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataBySensorUid_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SENSOR_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorUid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataBySensorUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataBySensorUid_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public String sensorUid; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      SENSOR_UID((short)2, "sensorUid"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // SENSOR_UID
            return SENSOR_UID;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __STARTTIME_ISSET_ID = 1;
    private static final int __ENDTIME_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SENSOR_UID, new org.apache.thrift.meta_data.FieldMetaData("sensorUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataBySensorUid_args.class, metaDataMap);
    }

    public querySensorHistoricalDataBySensorUid_args() {
    }

    public querySensorHistoricalDataBySensorUid_args(
      int requestId,
      String sensorUid,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.sensorUid = sensorUid;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataBySensorUid_args(querySensorHistoricalDataBySensorUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetSensorUid()) {
        this.sensorUid = other.sensorUid;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public querySensorHistoricalDataBySensorUid_args deepCopy() {
      return new querySensorHistoricalDataBySensorUid_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.sensorUid = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorHistoricalDataBySensorUid_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public String getSensorUid() {
      return this.sensorUid;
    }

    public querySensorHistoricalDataBySensorUid_args setSensorUid(String sensorUid) {
      this.sensorUid = sensorUid;
      return this;
    }

    public void unsetSensorUid() {
      this.sensorUid = null;
    }

    /** Returns true if field sensorUid is set (has been assigned a value) and false otherwise */
    public boolean isSetSensorUid() {
      return this.sensorUid != null;
    }

    public void setSensorUidIsSet(boolean value) {
      if (!value) {
        this.sensorUid = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public querySensorHistoricalDataBySensorUid_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public querySensorHistoricalDataBySensorUid_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case SENSOR_UID:
        if (value == null) {
          unsetSensorUid();
        } else {
          setSensorUid((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case SENSOR_UID:
        return getSensorUid();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case SENSOR_UID:
        return isSetSensorUid();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataBySensorUid_args)
        return this.equals((querySensorHistoricalDataBySensorUid_args)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataBySensorUid_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_sensorUid = true && this.isSetSensorUid();
      boolean that_present_sensorUid = true && that.isSetSensorUid();
      if (this_present_sensorUid || that_present_sensorUid) {
        if (!(this_present_sensorUid && that_present_sensorUid))
          return false;
        if (!this.sensorUid.equals(that.sensorUid))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_sensorUid = true && (isSetSensorUid());
      list.add(present_sensorUid);
      if (present_sensorUid)
        list.add(sensorUid);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataBySensorUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSensorUid()).compareTo(other.isSetSensorUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSensorUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorUid, other.sensorUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataBySensorUid_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sensorUid:");
      if (this.sensorUid == null) {
        sb.append("null");
      } else {
        sb.append(this.sensorUid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataBySensorUid_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorUid_argsStandardScheme getScheme() {
        return new querySensorHistoricalDataBySensorUid_argsStandardScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorUid_argsStandardScheme extends StandardScheme<querySensorHistoricalDataBySensorUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataBySensorUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SENSOR_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sensorUid = iprot.readString();
                struct.setSensorUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataBySensorUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.sensorUid != null) {
          oprot.writeFieldBegin(SENSOR_UID_FIELD_DESC);
          oprot.writeString(struct.sensorUid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataBySensorUid_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorUid_argsTupleScheme getScheme() {
        return new querySensorHistoricalDataBySensorUid_argsTupleScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorUid_argsTupleScheme extends TupleScheme<querySensorHistoricalDataBySensorUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetSensorUid()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetSensorUid()) {
          oprot.writeString(struct.sensorUid);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sensorUid = iprot.readString();
          struct.setSensorUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataBySensorUid_result implements org.apache.thrift.TBase<querySensorHistoricalDataBySensorUid_result, querySensorHistoricalDataBySensorUid_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataBySensorUid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataBySensorUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataBySensorUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataBySensorUid_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataBySensorUid_result.class, metaDataMap);
    }

    public querySensorHistoricalDataBySensorUid_result() {
    }

    public querySensorHistoricalDataBySensorUid_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataBySensorUid_result(querySensorHistoricalDataBySensorUid_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorHistoricalDataBySensorUid_result deepCopy() {
      return new querySensorHistoricalDataBySensorUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorHistoricalDataBySensorUid_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataBySensorUid_result)
        return this.equals((querySensorHistoricalDataBySensorUid_result)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataBySensorUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataBySensorUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataBySensorUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataBySensorUid_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorUid_resultStandardScheme getScheme() {
        return new querySensorHistoricalDataBySensorUid_resultStandardScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorUid_resultStandardScheme extends StandardScheme<querySensorHistoricalDataBySensorUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataBySensorUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list96.size);
                  com.afarcloud.thrift.SensorData _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = new com.afarcloud.thrift.SensorData();
                    _elem97.read(iprot);
                    struct.success.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataBySensorUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataBySensorUid_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorUid_resultTupleScheme getScheme() {
        return new querySensorHistoricalDataBySensorUid_resultTupleScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorUid_resultTupleScheme extends TupleScheme<querySensorHistoricalDataBySensorUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list101.size);
            com.afarcloud.thrift.SensorData _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = new com.afarcloud.thrift.SensorData();
              _elem102.read(iprot);
              struct.success.add(_elem102);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataBySensorType_args implements org.apache.thrift.TBase<querySensorHistoricalDataBySensorType_args, querySensorHistoricalDataBySensorType_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataBySensorType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataBySensorType_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SENSOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorType", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataBySensorType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataBySensorType_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required
    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public com.afarcloud.thrift.SensorType sensorType; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius"),
      /**
       * 
       * @see com.afarcloud.thrift.SensorType
       */
      SENSOR_TYPE((short)4, "sensorType"),
      START_TIME((short)5, "startTime"),
      END_TIME((short)6, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          case 4: // SENSOR_TYPE
            return SENSOR_TYPE;
          case 5: // START_TIME
            return START_TIME;
          case 6: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SENSOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sensorType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.afarcloud.thrift.SensorType.class)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataBySensorType_args.class, metaDataMap);
    }

    public querySensorHistoricalDataBySensorType_args() {
    }

    public querySensorHistoricalDataBySensorType_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius,
      com.afarcloud.thrift.SensorType sensorType,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
      this.sensorType = sensorType;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataBySensorType_args(querySensorHistoricalDataBySensorType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
      if (other.isSetSensorType()) {
        this.sensorType = other.sensorType;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public querySensorHistoricalDataBySensorType_args deepCopy() {
      return new querySensorHistoricalDataBySensorType_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
      this.sensorType = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorHistoricalDataBySensorType_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public querySensorHistoricalDataBySensorType_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public querySensorHistoricalDataBySensorType_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public com.afarcloud.thrift.SensorType getSensorType() {
      return this.sensorType;
    }

    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public querySensorHistoricalDataBySensorType_args setSensorType(com.afarcloud.thrift.SensorType sensorType) {
      this.sensorType = sensorType;
      return this;
    }

    public void unsetSensorType() {
      this.sensorType = null;
    }

    /** Returns true if field sensorType is set (has been assigned a value) and false otherwise */
    public boolean isSetSensorType() {
      return this.sensorType != null;
    }

    public void setSensorTypeIsSet(boolean value) {
      if (!value) {
        this.sensorType = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public querySensorHistoricalDataBySensorType_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public querySensorHistoricalDataBySensorType_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      case SENSOR_TYPE:
        if (value == null) {
          unsetSensorType();
        } else {
          setSensorType((com.afarcloud.thrift.SensorType)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      case SENSOR_TYPE:
        return getSensorType();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      case SENSOR_TYPE:
        return isSetSensorType();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataBySensorType_args)
        return this.equals((querySensorHistoricalDataBySensorType_args)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataBySensorType_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      boolean this_present_sensorType = true && this.isSetSensorType();
      boolean that_present_sensorType = true && that.isSetSensorType();
      if (this_present_sensorType || that_present_sensorType) {
        if (!(this_present_sensorType && that_present_sensorType))
          return false;
        if (!this.sensorType.equals(that.sensorType))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      boolean present_sensorType = true && (isSetSensorType());
      list.add(present_sensorType);
      if (present_sensorType)
        list.add(sensorType.getValue());

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataBySensorType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSensorType()).compareTo(other.isSetSensorType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSensorType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorType, other.sensorType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataBySensorType_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sensorType:");
      if (this.sensorType == null) {
        sb.append("null");
      } else {
        sb.append(this.sensorType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataBySensorType_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorType_argsStandardScheme getScheme() {
        return new querySensorHistoricalDataBySensorType_argsStandardScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorType_argsStandardScheme extends StandardScheme<querySensorHistoricalDataBySensorType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataBySensorType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SENSOR_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
                struct.setSensorTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataBySensorType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        if (struct.sensorType != null) {
          oprot.writeFieldBegin(SENSOR_TYPE_FIELD_DESC);
          oprot.writeI32(struct.sensorType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataBySensorType_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorType_argsTupleScheme getScheme() {
        return new querySensorHistoricalDataBySensorType_argsTupleScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorType_argsTupleScheme extends TupleScheme<querySensorHistoricalDataBySensorType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        if (struct.isSetSensorType()) {
          optionals.set(3);
        }
        if (struct.isSetStartTime()) {
          optionals.set(4);
        }
        if (struct.isSetEndTime()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
        if (struct.isSetSensorType()) {
          oprot.writeI32(struct.sensorType.getValue());
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
          struct.setSensorTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataBySensorType_result implements org.apache.thrift.TBase<querySensorHistoricalDataBySensorType_result, querySensorHistoricalDataBySensorType_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataBySensorType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataBySensorType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataBySensorType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataBySensorType_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataBySensorType_result.class, metaDataMap);
    }

    public querySensorHistoricalDataBySensorType_result() {
    }

    public querySensorHistoricalDataBySensorType_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataBySensorType_result(querySensorHistoricalDataBySensorType_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorHistoricalDataBySensorType_result deepCopy() {
      return new querySensorHistoricalDataBySensorType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorHistoricalDataBySensorType_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataBySensorType_result)
        return this.equals((querySensorHistoricalDataBySensorType_result)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataBySensorType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataBySensorType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataBySensorType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataBySensorType_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorType_resultStandardScheme getScheme() {
        return new querySensorHistoricalDataBySensorType_resultStandardScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorType_resultStandardScheme extends StandardScheme<querySensorHistoricalDataBySensorType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataBySensorType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list104.size);
                  com.afarcloud.thrift.SensorData _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = new com.afarcloud.thrift.SensorData();
                    _elem105.read(iprot);
                    struct.success.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataBySensorType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataBySensorType_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorType_resultTupleScheme getScheme() {
        return new querySensorHistoricalDataBySensorType_resultTupleScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorType_resultTupleScheme extends TupleScheme<querySensorHistoricalDataBySensorType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list109.size);
            com.afarcloud.thrift.SensorData _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new com.afarcloud.thrift.SensorData();
              _elem110.read(iprot);
              struct.success.add(_elem110);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataByObservationType_args implements org.apache.thrift.TBase<querySensorHistoricalDataByObservationType_args, querySensorHistoricalDataByObservationType_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataByObservationType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataByObservationType_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField OBSER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("obserType", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataByObservationType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataByObservationType_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required
    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public com.afarcloud.thrift.ObservationType obserType; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius"),
      /**
       * 
       * @see com.afarcloud.thrift.ObservationType
       */
      OBSER_TYPE((short)4, "obserType"),
      START_TIME((short)5, "startTime"),
      END_TIME((short)6, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          case 4: // OBSER_TYPE
            return OBSER_TYPE;
          case 5: // START_TIME
            return START_TIME;
          case 6: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OBSER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("obserType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.afarcloud.thrift.ObservationType.class)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataByObservationType_args.class, metaDataMap);
    }

    public querySensorHistoricalDataByObservationType_args() {
    }

    public querySensorHistoricalDataByObservationType_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius,
      com.afarcloud.thrift.ObservationType obserType,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
      this.obserType = obserType;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataByObservationType_args(querySensorHistoricalDataByObservationType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
      if (other.isSetObserType()) {
        this.obserType = other.obserType;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public querySensorHistoricalDataByObservationType_args deepCopy() {
      return new querySensorHistoricalDataByObservationType_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
      this.obserType = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorHistoricalDataByObservationType_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public querySensorHistoricalDataByObservationType_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public querySensorHistoricalDataByObservationType_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public com.afarcloud.thrift.ObservationType getObserType() {
      return this.obserType;
    }

    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public querySensorHistoricalDataByObservationType_args setObserType(com.afarcloud.thrift.ObservationType obserType) {
      this.obserType = obserType;
      return this;
    }

    public void unsetObserType() {
      this.obserType = null;
    }

    /** Returns true if field obserType is set (has been assigned a value) and false otherwise */
    public boolean isSetObserType() {
      return this.obserType != null;
    }

    public void setObserTypeIsSet(boolean value) {
      if (!value) {
        this.obserType = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public querySensorHistoricalDataByObservationType_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public querySensorHistoricalDataByObservationType_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      case OBSER_TYPE:
        if (value == null) {
          unsetObserType();
        } else {
          setObserType((com.afarcloud.thrift.ObservationType)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      case OBSER_TYPE:
        return getObserType();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      case OBSER_TYPE:
        return isSetObserType();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataByObservationType_args)
        return this.equals((querySensorHistoricalDataByObservationType_args)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataByObservationType_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      boolean this_present_obserType = true && this.isSetObserType();
      boolean that_present_obserType = true && that.isSetObserType();
      if (this_present_obserType || that_present_obserType) {
        if (!(this_present_obserType && that_present_obserType))
          return false;
        if (!this.obserType.equals(that.obserType))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      boolean present_obserType = true && (isSetObserType());
      list.add(present_obserType);
      if (present_obserType)
        list.add(obserType.getValue());

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataByObservationType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetObserType()).compareTo(other.isSetObserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obserType, other.obserType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataByObservationType_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      if (!first) sb.append(", ");
      sb.append("obserType:");
      if (this.obserType == null) {
        sb.append("null");
      } else {
        sb.append(this.obserType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataByObservationType_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataByObservationType_argsStandardScheme getScheme() {
        return new querySensorHistoricalDataByObservationType_argsStandardScheme();
      }
    }

    private static class querySensorHistoricalDataByObservationType_argsStandardScheme extends StandardScheme<querySensorHistoricalDataByObservationType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataByObservationType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OBSER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.obserType = com.afarcloud.thrift.ObservationType.findByValue(iprot.readI32());
                struct.setObserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataByObservationType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        if (struct.obserType != null) {
          oprot.writeFieldBegin(OBSER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.obserType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataByObservationType_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataByObservationType_argsTupleScheme getScheme() {
        return new querySensorHistoricalDataByObservationType_argsTupleScheme();
      }
    }

    private static class querySensorHistoricalDataByObservationType_argsTupleScheme extends TupleScheme<querySensorHistoricalDataByObservationType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataByObservationType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        if (struct.isSetObserType()) {
          optionals.set(3);
        }
        if (struct.isSetStartTime()) {
          optionals.set(4);
        }
        if (struct.isSetEndTime()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
        if (struct.isSetObserType()) {
          oprot.writeI32(struct.obserType.getValue());
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataByObservationType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.obserType = com.afarcloud.thrift.ObservationType.findByValue(iprot.readI32());
          struct.setObserTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataByObservationType_result implements org.apache.thrift.TBase<querySensorHistoricalDataByObservationType_result, querySensorHistoricalDataByObservationType_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataByObservationType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataByObservationType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataByObservationType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataByObservationType_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataByObservationType_result.class, metaDataMap);
    }

    public querySensorHistoricalDataByObservationType_result() {
    }

    public querySensorHistoricalDataByObservationType_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataByObservationType_result(querySensorHistoricalDataByObservationType_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorHistoricalDataByObservationType_result deepCopy() {
      return new querySensorHistoricalDataByObservationType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorHistoricalDataByObservationType_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataByObservationType_result)
        return this.equals((querySensorHistoricalDataByObservationType_result)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataByObservationType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataByObservationType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataByObservationType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataByObservationType_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataByObservationType_resultStandardScheme getScheme() {
        return new querySensorHistoricalDataByObservationType_resultStandardScheme();
      }
    }

    private static class querySensorHistoricalDataByObservationType_resultStandardScheme extends StandardScheme<querySensorHistoricalDataByObservationType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataByObservationType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list112.size);
                  com.afarcloud.thrift.SensorData _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new com.afarcloud.thrift.SensorData();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataByObservationType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataByObservationType_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataByObservationType_resultTupleScheme getScheme() {
        return new querySensorHistoricalDataByObservationType_resultTupleScheme();
      }
    }

    private static class querySensorHistoricalDataByObservationType_resultTupleScheme extends TupleScheme<querySensorHistoricalDataByObservationType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataByObservationType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataByObservationType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list117.size);
            com.afarcloud.thrift.SensorData _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new com.afarcloud.thrift.SensorData();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCollarHistoricalData_args implements org.apache.thrift.TBase<queryCollarHistoricalData_args, queryCollarHistoricalData_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarHistoricalData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarHistoricalData_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarHistoricalData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarHistoricalData_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius"),
      START_TIME((short)4, "startTime"),
      END_TIME((short)5, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          case 4: // START_TIME
            return START_TIME;
          case 5: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarHistoricalData_args.class, metaDataMap);
    }

    public queryCollarHistoricalData_args() {
    }

    public queryCollarHistoricalData_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarHistoricalData_args(queryCollarHistoricalData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public queryCollarHistoricalData_args deepCopy() {
      return new queryCollarHistoricalData_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryCollarHistoricalData_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public queryCollarHistoricalData_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public queryCollarHistoricalData_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.startTime;
    }

    public queryCollarHistoricalData_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public queryCollarHistoricalData_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarHistoricalData_args)
        return this.equals((queryCollarHistoricalData_args)that);
      return false;
    }

    public boolean equals(queryCollarHistoricalData_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarHistoricalData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarHistoricalData_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarHistoricalData_argsStandardSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalData_argsStandardScheme getScheme() {
        return new queryCollarHistoricalData_argsStandardScheme();
      }
    }

    private static class queryCollarHistoricalData_argsStandardScheme extends StandardScheme<queryCollarHistoricalData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarHistoricalData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarHistoricalData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarHistoricalData_argsTupleSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalData_argsTupleScheme getScheme() {
        return new queryCollarHistoricalData_argsTupleScheme();
      }
    }

    private static class queryCollarHistoricalData_argsTupleScheme extends TupleScheme<queryCollarHistoricalData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        if (struct.isSetStartTime()) {
          optionals.set(3);
        }
        if (struct.isSetEndTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class queryCollarHistoricalData_result implements org.apache.thrift.TBase<queryCollarHistoricalData_result, queryCollarHistoricalData_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarHistoricalData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarHistoricalData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarHistoricalData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarHistoricalData_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.CollarData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.CollarData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarHistoricalData_result.class, metaDataMap);
    }

    public queryCollarHistoricalData_result() {
    }

    public queryCollarHistoricalData_result(
      List<com.afarcloud.thrift.CollarData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarHistoricalData_result(queryCollarHistoricalData_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.CollarData> __this__success = new ArrayList<com.afarcloud.thrift.CollarData>(other.success.size());
        for (com.afarcloud.thrift.CollarData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.CollarData(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCollarHistoricalData_result deepCopy() {
      return new queryCollarHistoricalData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.CollarData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.CollarData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.CollarData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.CollarData> getSuccess() {
      return this.success;
    }

    public queryCollarHistoricalData_result setSuccess(List<com.afarcloud.thrift.CollarData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.CollarData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarHistoricalData_result)
        return this.equals((queryCollarHistoricalData_result)that);
      return false;
    }

    public boolean equals(queryCollarHistoricalData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarHistoricalData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarHistoricalData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarHistoricalData_resultStandardSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalData_resultStandardScheme getScheme() {
        return new queryCollarHistoricalData_resultStandardScheme();
      }
    }

    private static class queryCollarHistoricalData_resultStandardScheme extends StandardScheme<queryCollarHistoricalData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarHistoricalData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list120.size);
                  com.afarcloud.thrift.CollarData _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = new com.afarcloud.thrift.CollarData();
                    _elem121.read(iprot);
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarHistoricalData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.CollarData _iter123 : struct.success)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarHistoricalData_resultTupleSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalData_resultTupleScheme getScheme() {
        return new queryCollarHistoricalData_resultTupleScheme();
      }
    }

    private static class queryCollarHistoricalData_resultTupleScheme extends TupleScheme<queryCollarHistoricalData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.CollarData _iter124 : struct.success)
            {
              _iter124.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list125.size);
            com.afarcloud.thrift.CollarData _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = new com.afarcloud.thrift.CollarData();
              _elem126.read(iprot);
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCollarHistoricalDataByCollarUid_args implements org.apache.thrift.TBase<queryCollarHistoricalDataByCollarUid_args, queryCollarHistoricalDataByCollarUid_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarHistoricalDataByCollarUid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarHistoricalDataByCollarUid_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COLLAR_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("collarUid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarHistoricalDataByCollarUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarHistoricalDataByCollarUid_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public String collarUid; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      COLLAR_UID((short)2, "collarUid"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // COLLAR_UID
            return COLLAR_UID;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __STARTTIME_ISSET_ID = 1;
    private static final int __ENDTIME_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COLLAR_UID, new org.apache.thrift.meta_data.FieldMetaData("collarUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarHistoricalDataByCollarUid_args.class, metaDataMap);
    }

    public queryCollarHistoricalDataByCollarUid_args() {
    }

    public queryCollarHistoricalDataByCollarUid_args(
      int requestId,
      String collarUid,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.collarUid = collarUid;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarHistoricalDataByCollarUid_args(queryCollarHistoricalDataByCollarUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetCollarUid()) {
        this.collarUid = other.collarUid;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public queryCollarHistoricalDataByCollarUid_args deepCopy() {
      return new queryCollarHistoricalDataByCollarUid_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.collarUid = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryCollarHistoricalDataByCollarUid_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public String getCollarUid() {
      return this.collarUid;
    }

    public queryCollarHistoricalDataByCollarUid_args setCollarUid(String collarUid) {
      this.collarUid = collarUid;
      return this;
    }

    public void unsetCollarUid() {
      this.collarUid = null;
    }

    /** Returns true if field collarUid is set (has been assigned a value) and false otherwise */
    public boolean isSetCollarUid() {
      return this.collarUid != null;
    }

    public void setCollarUidIsSet(boolean value) {
      if (!value) {
        this.collarUid = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public queryCollarHistoricalDataByCollarUid_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public queryCollarHistoricalDataByCollarUid_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case COLLAR_UID:
        if (value == null) {
          unsetCollarUid();
        } else {
          setCollarUid((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case COLLAR_UID:
        return getCollarUid();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case COLLAR_UID:
        return isSetCollarUid();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarHistoricalDataByCollarUid_args)
        return this.equals((queryCollarHistoricalDataByCollarUid_args)that);
      return false;
    }

    public boolean equals(queryCollarHistoricalDataByCollarUid_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_collarUid = true && this.isSetCollarUid();
      boolean that_present_collarUid = true && that.isSetCollarUid();
      if (this_present_collarUid || that_present_collarUid) {
        if (!(this_present_collarUid && that_present_collarUid))
          return false;
        if (!this.collarUid.equals(that.collarUid))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_collarUid = true && (isSetCollarUid());
      list.add(present_collarUid);
      if (present_collarUid)
        list.add(collarUid);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarHistoricalDataByCollarUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCollarUid()).compareTo(other.isSetCollarUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollarUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collarUid, other.collarUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarHistoricalDataByCollarUid_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("collarUid:");
      if (this.collarUid == null) {
        sb.append("null");
      } else {
        sb.append(this.collarUid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarHistoricalDataByCollarUid_argsStandardSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalDataByCollarUid_argsStandardScheme getScheme() {
        return new queryCollarHistoricalDataByCollarUid_argsStandardScheme();
      }
    }

    private static class queryCollarHistoricalDataByCollarUid_argsStandardScheme extends StandardScheme<queryCollarHistoricalDataByCollarUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarHistoricalDataByCollarUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLLAR_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collarUid = iprot.readString();
                struct.setCollarUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarHistoricalDataByCollarUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.collarUid != null) {
          oprot.writeFieldBegin(COLLAR_UID_FIELD_DESC);
          oprot.writeString(struct.collarUid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarHistoricalDataByCollarUid_argsTupleSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalDataByCollarUid_argsTupleScheme getScheme() {
        return new queryCollarHistoricalDataByCollarUid_argsTupleScheme();
      }
    }

    private static class queryCollarHistoricalDataByCollarUid_argsTupleScheme extends TupleScheme<queryCollarHistoricalDataByCollarUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalDataByCollarUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetCollarUid()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetCollarUid()) {
          oprot.writeString(struct.collarUid);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalDataByCollarUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.collarUid = iprot.readString();
          struct.setCollarUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class queryCollarHistoricalDataByCollarUid_result implements org.apache.thrift.TBase<queryCollarHistoricalDataByCollarUid_result, queryCollarHistoricalDataByCollarUid_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarHistoricalDataByCollarUid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarHistoricalDataByCollarUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarHistoricalDataByCollarUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarHistoricalDataByCollarUid_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.CollarData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.CollarData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarHistoricalDataByCollarUid_result.class, metaDataMap);
    }

    public queryCollarHistoricalDataByCollarUid_result() {
    }

    public queryCollarHistoricalDataByCollarUid_result(
      List<com.afarcloud.thrift.CollarData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarHistoricalDataByCollarUid_result(queryCollarHistoricalDataByCollarUid_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.CollarData> __this__success = new ArrayList<com.afarcloud.thrift.CollarData>(other.success.size());
        for (com.afarcloud.thrift.CollarData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.CollarData(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCollarHistoricalDataByCollarUid_result deepCopy() {
      return new queryCollarHistoricalDataByCollarUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.CollarData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.CollarData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.CollarData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.CollarData> getSuccess() {
      return this.success;
    }

    public queryCollarHistoricalDataByCollarUid_result setSuccess(List<com.afarcloud.thrift.CollarData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.CollarData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarHistoricalDataByCollarUid_result)
        return this.equals((queryCollarHistoricalDataByCollarUid_result)that);
      return false;
    }

    public boolean equals(queryCollarHistoricalDataByCollarUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarHistoricalDataByCollarUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarHistoricalDataByCollarUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarHistoricalDataByCollarUid_resultStandardSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalDataByCollarUid_resultStandardScheme getScheme() {
        return new queryCollarHistoricalDataByCollarUid_resultStandardScheme();
      }
    }

    private static class queryCollarHistoricalDataByCollarUid_resultStandardScheme extends StandardScheme<queryCollarHistoricalDataByCollarUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarHistoricalDataByCollarUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list128.size);
                  com.afarcloud.thrift.CollarData _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = new com.afarcloud.thrift.CollarData();
                    _elem129.read(iprot);
                    struct.success.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarHistoricalDataByCollarUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.CollarData _iter131 : struct.success)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarHistoricalDataByCollarUid_resultTupleSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalDataByCollarUid_resultTupleScheme getScheme() {
        return new queryCollarHistoricalDataByCollarUid_resultTupleScheme();
      }
    }

    private static class queryCollarHistoricalDataByCollarUid_resultTupleScheme extends TupleScheme<queryCollarHistoricalDataByCollarUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalDataByCollarUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.CollarData _iter132 : struct.success)
            {
              _iter132.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalDataByCollarUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list133.size);
            com.afarcloud.thrift.CollarData _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = new com.afarcloud.thrift.CollarData();
              _elem134.read(iprot);
              struct.success.add(_elem134);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleHistoricalStateVectors_args implements org.apache.thrift.TBase<queryVehicleHistoricalStateVectors_args, queryVehicleHistoricalStateVectors_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleHistoricalStateVectors_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleHistoricalStateVectors_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleHistoricalStateVectors_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleHistoricalStateVectors_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius"),
      START_TIME((short)4, "startTime"),
      END_TIME((short)5, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          case 4: // START_TIME
            return START_TIME;
          case 5: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleHistoricalStateVectors_args.class, metaDataMap);
    }

    public queryVehicleHistoricalStateVectors_args() {
    }

    public queryVehicleHistoricalStateVectors_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleHistoricalStateVectors_args(queryVehicleHistoricalStateVectors_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public queryVehicleHistoricalStateVectors_args deepCopy() {
      return new queryVehicleHistoricalStateVectors_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryVehicleHistoricalStateVectors_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public queryVehicleHistoricalStateVectors_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public queryVehicleHistoricalStateVectors_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.startTime;
    }

    public queryVehicleHistoricalStateVectors_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public queryVehicleHistoricalStateVectors_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleHistoricalStateVectors_args)
        return this.equals((queryVehicleHistoricalStateVectors_args)that);
      return false;
    }

    public boolean equals(queryVehicleHistoricalStateVectors_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleHistoricalStateVectors_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleHistoricalStateVectors_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleHistoricalStateVectors_argsStandardSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectors_argsStandardScheme getScheme() {
        return new queryVehicleHistoricalStateVectors_argsStandardScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectors_argsStandardScheme extends StandardScheme<queryVehicleHistoricalStateVectors_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleHistoricalStateVectors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleHistoricalStateVectors_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleHistoricalStateVectors_argsTupleSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectors_argsTupleScheme getScheme() {
        return new queryVehicleHistoricalStateVectors_argsTupleScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectors_argsTupleScheme extends TupleScheme<queryVehicleHistoricalStateVectors_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectors_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        if (struct.isSetStartTime()) {
          optionals.set(3);
        }
        if (struct.isSetEndTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectors_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleHistoricalStateVectors_result implements org.apache.thrift.TBase<queryVehicleHistoricalStateVectors_result, queryVehicleHistoricalStateVectors_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleHistoricalStateVectors_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleHistoricalStateVectors_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleHistoricalStateVectors_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleHistoricalStateVectors_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.StateVector> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.StateVector.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleHistoricalStateVectors_result.class, metaDataMap);
    }

    public queryVehicleHistoricalStateVectors_result() {
    }

    public queryVehicleHistoricalStateVectors_result(
      List<com.afarcloud.thrift.StateVector> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleHistoricalStateVectors_result(queryVehicleHistoricalStateVectors_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.StateVector> __this__success = new ArrayList<com.afarcloud.thrift.StateVector>(other.success.size());
        for (com.afarcloud.thrift.StateVector other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.StateVector(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryVehicleHistoricalStateVectors_result deepCopy() {
      return new queryVehicleHistoricalStateVectors_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.StateVector> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.StateVector elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.StateVector>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.StateVector> getSuccess() {
      return this.success;
    }

    public queryVehicleHistoricalStateVectors_result setSuccess(List<com.afarcloud.thrift.StateVector> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.StateVector>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleHistoricalStateVectors_result)
        return this.equals((queryVehicleHistoricalStateVectors_result)that);
      return false;
    }

    public boolean equals(queryVehicleHistoricalStateVectors_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleHistoricalStateVectors_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleHistoricalStateVectors_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleHistoricalStateVectors_resultStandardSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectors_resultStandardScheme getScheme() {
        return new queryVehicleHistoricalStateVectors_resultStandardScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectors_resultStandardScheme extends StandardScheme<queryVehicleHistoricalStateVectors_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleHistoricalStateVectors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list136.size);
                  com.afarcloud.thrift.StateVector _elem137;
                  for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                  {
                    _elem137 = new com.afarcloud.thrift.StateVector();
                    _elem137.read(iprot);
                    struct.success.add(_elem137);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleHistoricalStateVectors_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.StateVector _iter139 : struct.success)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleHistoricalStateVectors_resultTupleSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectors_resultTupleScheme getScheme() {
        return new queryVehicleHistoricalStateVectors_resultTupleScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectors_resultTupleScheme extends TupleScheme<queryVehicleHistoricalStateVectors_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectors_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.StateVector _iter140 : struct.success)
            {
              _iter140.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectors_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list141.size);
            com.afarcloud.thrift.StateVector _elem142;
            for (int _i143 = 0; _i143 < _list141.size; ++_i143)
            {
              _elem142 = new com.afarcloud.thrift.StateVector();
              _elem142.read(iprot);
              struct.success.add(_elem142);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleHistoricalStateVectorByVehicleId_args implements org.apache.thrift.TBase<queryVehicleHistoricalStateVectorByVehicleId_args, queryVehicleHistoricalStateVectorByVehicleId_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleHistoricalStateVectorByVehicleId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleHistoricalStateVectorByVehicleId_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VEHICLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicleId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleHistoricalStateVectorByVehicleId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleHistoricalStateVectorByVehicleId_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int vehicleId; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      VEHICLE_ID((short)2, "vehicleId"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // VEHICLE_ID
            return VEHICLE_ID;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __VEHICLEID_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VEHICLE_ID, new org.apache.thrift.meta_data.FieldMetaData("vehicleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleHistoricalStateVectorByVehicleId_args.class, metaDataMap);
    }

    public queryVehicleHistoricalStateVectorByVehicleId_args() {
    }

    public queryVehicleHistoricalStateVectorByVehicleId_args(
      int requestId,
      int vehicleId,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleHistoricalStateVectorByVehicleId_args(queryVehicleHistoricalStateVectorByVehicleId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.vehicleId = other.vehicleId;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public queryVehicleHistoricalStateVectorByVehicleId_args deepCopy() {
      return new queryVehicleHistoricalStateVectorByVehicleId_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setVehicleIdIsSet(false);
      this.vehicleId = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryVehicleHistoricalStateVectorByVehicleId_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getVehicleId() {
      return this.vehicleId;
    }

    public queryVehicleHistoricalStateVectorByVehicleId_args setVehicleId(int vehicleId) {
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
      return this;
    }

    public void unsetVehicleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    /** Returns true if field vehicleId is set (has been assigned a value) and false otherwise */
    public boolean isSetVehicleId() {
      return EncodingUtils.testBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    public void setVehicleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEHICLEID_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.startTime;
    }

    public queryVehicleHistoricalStateVectorByVehicleId_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public queryVehicleHistoricalStateVectorByVehicleId_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case VEHICLE_ID:
        if (value == null) {
          unsetVehicleId();
        } else {
          setVehicleId((Integer)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case VEHICLE_ID:
        return Integer.valueOf(getVehicleId());

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case VEHICLE_ID:
        return isSetVehicleId();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleHistoricalStateVectorByVehicleId_args)
        return this.equals((queryVehicleHistoricalStateVectorByVehicleId_args)that);
      return false;
    }

    public boolean equals(queryVehicleHistoricalStateVectorByVehicleId_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_vehicleId = true;
      boolean that_present_vehicleId = true;
      if (this_present_vehicleId || that_present_vehicleId) {
        if (!(this_present_vehicleId && that_present_vehicleId))
          return false;
        if (this.vehicleId != that.vehicleId)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_vehicleId = true;
      list.add(present_vehicleId);
      if (present_vehicleId)
        list.add(vehicleId);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleHistoricalStateVectorByVehicleId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVehicleId()).compareTo(other.isSetVehicleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVehicleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicleId, other.vehicleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleHistoricalStateVectorByVehicleId_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vehicleId:");
      sb.append(this.vehicleId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleHistoricalStateVectorByVehicleId_argsStandardSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectorByVehicleId_argsStandardScheme getScheme() {
        return new queryVehicleHistoricalStateVectorByVehicleId_argsStandardScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectorByVehicleId_argsStandardScheme extends StandardScheme<queryVehicleHistoricalStateVectorByVehicleId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleHistoricalStateVectorByVehicleId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VEHICLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vehicleId = iprot.readI32();
                struct.setVehicleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleHistoricalStateVectorByVehicleId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VEHICLE_ID_FIELD_DESC);
        oprot.writeI32(struct.vehicleId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleHistoricalStateVectorByVehicleId_argsTupleSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectorByVehicleId_argsTupleScheme getScheme() {
        return new queryVehicleHistoricalStateVectorByVehicleId_argsTupleScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectorByVehicleId_argsTupleScheme extends TupleScheme<queryVehicleHistoricalStateVectorByVehicleId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectorByVehicleId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetVehicleId()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetVehicleId()) {
          oprot.writeI32(struct.vehicleId);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectorByVehicleId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vehicleId = iprot.readI32();
          struct.setVehicleIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleHistoricalStateVectorByVehicleId_result implements org.apache.thrift.TBase<queryVehicleHistoricalStateVectorByVehicleId_result, queryVehicleHistoricalStateVectorByVehicleId_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleHistoricalStateVectorByVehicleId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleHistoricalStateVectorByVehicleId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleHistoricalStateVectorByVehicleId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleHistoricalStateVectorByVehicleId_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.StateVector> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.StateVector.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleHistoricalStateVectorByVehicleId_result.class, metaDataMap);
    }

    public queryVehicleHistoricalStateVectorByVehicleId_result() {
    }

    public queryVehicleHistoricalStateVectorByVehicleId_result(
      List<com.afarcloud.thrift.StateVector> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleHistoricalStateVectorByVehicleId_result(queryVehicleHistoricalStateVectorByVehicleId_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.StateVector> __this__success = new ArrayList<com.afarcloud.thrift.StateVector>(other.success.size());
        for (com.afarcloud.thrift.StateVector other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.StateVector(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryVehicleHistoricalStateVectorByVehicleId_result deepCopy() {
      return new queryVehicleHistoricalStateVectorByVehicleId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.StateVector> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.StateVector elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.StateVector>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.StateVector> getSuccess() {
      return this.success;
    }

    public queryVehicleHistoricalStateVectorByVehicleId_result setSuccess(List<com.afarcloud.thrift.StateVector> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.StateVector>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleHistoricalStateVectorByVehicleId_result)
        return this.equals((queryVehicleHistoricalStateVectorByVehicleId_result)that);
      return false;
    }

    public boolean equals(queryVehicleHistoricalStateVectorByVehicleId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleHistoricalStateVectorByVehicleId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleHistoricalStateVectorByVehicleId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleHistoricalStateVectorByVehicleId_resultStandardSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectorByVehicleId_resultStandardScheme getScheme() {
        return new queryVehicleHistoricalStateVectorByVehicleId_resultStandardScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectorByVehicleId_resultStandardScheme extends StandardScheme<queryVehicleHistoricalStateVectorByVehicleId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleHistoricalStateVectorByVehicleId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list144.size);
                  com.afarcloud.thrift.StateVector _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = new com.afarcloud.thrift.StateVector();
                    _elem145.read(iprot);
                    struct.success.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleHistoricalStateVectorByVehicleId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.StateVector _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleHistoricalStateVectorByVehicleId_resultTupleSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectorByVehicleId_resultTupleScheme getScheme() {
        return new queryVehicleHistoricalStateVectorByVehicleId_resultTupleScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectorByVehicleId_resultTupleScheme extends TupleScheme<queryVehicleHistoricalStateVectorByVehicleId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectorByVehicleId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.StateVector _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectorByVehicleId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list149.size);
            com.afarcloud.thrift.StateVector _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = new com.afarcloud.thrift.StateVector();
              _elem150.read(iprot);
              struct.success.add(_elem150);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class storeEvent_args implements org.apache.thrift.TBase<storeEvent_args, storeEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeEvent_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField VEHICLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicleId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SUBTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("subtype", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TIME_REFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeReference", org.apache.thrift.protocol.TType.I64, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeEvent_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int missionId; // required
    public int vehicleId; // required
    public int subtype; // required
    public String description; // required
    public long timeReference; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      MISSION_ID((short)2, "missionId"),
      VEHICLE_ID((short)3, "vehicleId"),
      SUBTYPE((short)4, "subtype"),
      DESCRIPTION((short)5, "description"),
      TIME_REFERENCE((short)6, "timeReference");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // MISSION_ID
            return MISSION_ID;
          case 3: // VEHICLE_ID
            return VEHICLE_ID;
          case 4: // SUBTYPE
            return SUBTYPE;
          case 5: // DESCRIPTION
            return DESCRIPTION;
          case 6: // TIME_REFERENCE
            return TIME_REFERENCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __MISSIONID_ISSET_ID = 1;
    private static final int __VEHICLEID_ISSET_ID = 2;
    private static final int __SUBTYPE_ISSET_ID = 3;
    private static final int __TIMEREFERENCE_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VEHICLE_ID, new org.apache.thrift.meta_data.FieldMetaData("vehicleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SUBTYPE, new org.apache.thrift.meta_data.FieldMetaData("subtype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME_REFERENCE, new org.apache.thrift.meta_data.FieldMetaData("timeReference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeEvent_args.class, metaDataMap);
    }

    public storeEvent_args() {
    }

    public storeEvent_args(
      int requestId,
      int missionId,
      int vehicleId,
      int subtype,
      String description,
      long timeReference)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.missionId = missionId;
      setMissionIdIsSet(true);
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
      this.subtype = subtype;
      setSubtypeIsSet(true);
      this.description = description;
      this.timeReference = timeReference;
      setTimeReferenceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeEvent_args(storeEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.missionId = other.missionId;
      this.vehicleId = other.vehicleId;
      this.subtype = other.subtype;
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      this.timeReference = other.timeReference;
    }

    public storeEvent_args deepCopy() {
      return new storeEvent_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setMissionIdIsSet(false);
      this.missionId = 0;
      setVehicleIdIsSet(false);
      this.vehicleId = 0;
      setSubtypeIsSet(false);
      this.subtype = 0;
      this.description = null;
      setTimeReferenceIsSet(false);
      this.timeReference = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public storeEvent_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getMissionId() {
      return this.missionId;
    }

    public storeEvent_args setMissionId(int missionId) {
      this.missionId = missionId;
      setMissionIdIsSet(true);
      return this;
    }

    public void unsetMissionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return EncodingUtils.testBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    public void setMissionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISSIONID_ISSET_ID, value);
    }

    public int getVehicleId() {
      return this.vehicleId;
    }

    public storeEvent_args setVehicleId(int vehicleId) {
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
      return this;
    }

    public void unsetVehicleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    /** Returns true if field vehicleId is set (has been assigned a value) and false otherwise */
    public boolean isSetVehicleId() {
      return EncodingUtils.testBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    public void setVehicleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEHICLEID_ISSET_ID, value);
    }

    public int getSubtype() {
      return this.subtype;
    }

    public storeEvent_args setSubtype(int subtype) {
      this.subtype = subtype;
      setSubtypeIsSet(true);
      return this;
    }

    public void unsetSubtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBTYPE_ISSET_ID);
    }

    /** Returns true if field subtype is set (has been assigned a value) and false otherwise */
    public boolean isSetSubtype() {
      return EncodingUtils.testBit(__isset_bitfield, __SUBTYPE_ISSET_ID);
    }

    public void setSubtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBTYPE_ISSET_ID, value);
    }

    public String getDescription() {
      return this.description;
    }

    public storeEvent_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public long getTimeReference() {
      return this.timeReference;
    }

    public storeEvent_args setTimeReference(long timeReference) {
      this.timeReference = timeReference;
      setTimeReferenceIsSet(true);
      return this;
    }

    public void unsetTimeReference() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEREFERENCE_ISSET_ID);
    }

    /** Returns true if field timeReference is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeReference() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMEREFERENCE_ISSET_ID);
    }

    public void setTimeReferenceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEREFERENCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((Integer)value);
        }
        break;

      case VEHICLE_ID:
        if (value == null) {
          unsetVehicleId();
        } else {
          setVehicleId((Integer)value);
        }
        break;

      case SUBTYPE:
        if (value == null) {
          unsetSubtype();
        } else {
          setSubtype((Integer)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      case TIME_REFERENCE:
        if (value == null) {
          unsetTimeReference();
        } else {
          setTimeReference((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case MISSION_ID:
        return Integer.valueOf(getMissionId());

      case VEHICLE_ID:
        return Integer.valueOf(getVehicleId());

      case SUBTYPE:
        return Integer.valueOf(getSubtype());

      case DESCRIPTION:
        return getDescription();

      case TIME_REFERENCE:
        return Long.valueOf(getTimeReference());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case MISSION_ID:
        return isSetMissionId();
      case VEHICLE_ID:
        return isSetVehicleId();
      case SUBTYPE:
        return isSetSubtype();
      case DESCRIPTION:
        return isSetDescription();
      case TIME_REFERENCE:
        return isSetTimeReference();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeEvent_args)
        return this.equals((storeEvent_args)that);
      return false;
    }

    public boolean equals(storeEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_missionId = true;
      boolean that_present_missionId = true;
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (this.missionId != that.missionId)
          return false;
      }

      boolean this_present_vehicleId = true;
      boolean that_present_vehicleId = true;
      if (this_present_vehicleId || that_present_vehicleId) {
        if (!(this_present_vehicleId && that_present_vehicleId))
          return false;
        if (this.vehicleId != that.vehicleId)
          return false;
      }

      boolean this_present_subtype = true;
      boolean that_present_subtype = true;
      if (this_present_subtype || that_present_subtype) {
        if (!(this_present_subtype && that_present_subtype))
          return false;
        if (this.subtype != that.subtype)
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_timeReference = true;
      boolean that_present_timeReference = true;
      if (this_present_timeReference || that_present_timeReference) {
        if (!(this_present_timeReference && that_present_timeReference))
          return false;
        if (this.timeReference != that.timeReference)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_missionId = true;
      list.add(present_missionId);
      if (present_missionId)
        list.add(missionId);

      boolean present_vehicleId = true;
      list.add(present_vehicleId);
      if (present_vehicleId)
        list.add(vehicleId);

      boolean present_subtype = true;
      list.add(present_subtype);
      if (present_subtype)
        list.add(subtype);

      boolean present_description = true && (isSetDescription());
      list.add(present_description);
      if (present_description)
        list.add(description);

      boolean present_timeReference = true;
      list.add(present_timeReference);
      if (present_timeReference)
        list.add(timeReference);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVehicleId()).compareTo(other.isSetVehicleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVehicleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicleId, other.vehicleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubtype()).compareTo(other.isSetSubtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subtype, other.subtype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeReference()).compareTo(other.isSetTimeReference());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeReference()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeReference, other.timeReference);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeEvent_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("missionId:");
      sb.append(this.missionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vehicleId:");
      sb.append(this.vehicleId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("subtype:");
      sb.append(this.subtype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeReference:");
      sb.append(this.timeReference);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeEvent_argsStandardSchemeFactory implements SchemeFactory {
      public storeEvent_argsStandardScheme getScheme() {
        return new storeEvent_argsStandardScheme();
      }
    }

    private static class storeEvent_argsStandardScheme extends StandardScheme<storeEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.missionId = iprot.readI32();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VEHICLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vehicleId = iprot.readI32();
                struct.setVehicleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SUBTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.subtype = iprot.readI32();
                struct.setSubtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TIME_REFERENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timeReference = iprot.readI64();
                struct.setTimeReferenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
        oprot.writeI32(struct.missionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VEHICLE_ID_FIELD_DESC);
        oprot.writeI32(struct.vehicleId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SUBTYPE_FIELD_DESC);
        oprot.writeI32(struct.subtype);
        oprot.writeFieldEnd();
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_REFERENCE_FIELD_DESC);
        oprot.writeI64(struct.timeReference);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeEvent_argsTupleSchemeFactory implements SchemeFactory {
      public storeEvent_argsTupleScheme getScheme() {
        return new storeEvent_argsTupleScheme();
      }
    }

    private static class storeEvent_argsTupleScheme extends TupleScheme<storeEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetMissionId()) {
          optionals.set(1);
        }
        if (struct.isSetVehicleId()) {
          optionals.set(2);
        }
        if (struct.isSetSubtype()) {
          optionals.set(3);
        }
        if (struct.isSetDescription()) {
          optionals.set(4);
        }
        if (struct.isSetTimeReference()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetMissionId()) {
          oprot.writeI32(struct.missionId);
        }
        if (struct.isSetVehicleId()) {
          oprot.writeI32(struct.vehicleId);
        }
        if (struct.isSetSubtype()) {
          oprot.writeI32(struct.subtype);
        }
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetTimeReference()) {
          oprot.writeI64(struct.timeReference);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.missionId = iprot.readI32();
          struct.setMissionIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.vehicleId = iprot.readI32();
          struct.setVehicleIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.subtype = iprot.readI32();
          struct.setSubtypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.timeReference = iprot.readI64();
          struct.setTimeReferenceIsSet(true);
        }
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
